
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


//table User
model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  personne Personne  @relation(fields: [id], references: [id]) // user hérite de personne
  documents Document[] // un utilisateur peut générer plusieurs documents
  mairieId Int?       // Relation optionnelle avec une mairie
  mairie   Mairie?    @relation(fields: [mairieId], references: [id])
}

//table Personne
model Personne {
  id       Int       @id @default(autoincrement())
  nom      String
  prenom   String
  profession   String?
  adresse    String?
  telephone      String?
  dateNaissance   String?
  nationalite   String?
  numeroCni   String?
  sexe      String?
  lieuNaissance   String?
 // role    String?
  user     User?
  documents DocumentPersonne[]

}

//table DocumentTemplate
model DocumentTemplate {
  id       Int       @id @default(autoincrement())
  content  String
  typeDocument  String @unique
  // variables Variable[]
  documents Document[]//
  documentTemplateVariables DocumentTemplateVariable[] // Added opposite relation field
}
//table Variable
model Variable {
  id            Int               @id @default(autoincrement())
  nomVariable String   @unique
  documentTemplateVariables DocumentTemplateVariable[] 
}
model DocumentTemplateVariable {
  id               Int               @id @default(autoincrement())
  documentTemplate DocumentTemplate  @relation(fields: [documentTemplateId], references: [id])
  documentTemplateId Int
  variable          Variable         @relation(fields: [variableId], references: [id])
  variableId        Int
}

//table Document
model Document {
  id            Int               @id @default(autoincrement())
  date          DateTime
  identiteDuMaire          String
  template      DocumentTemplate? @relation(fields: [templateId], references: [id])
  templateId    Int?
  personnes     DocumentPersonne[]
  //personnes     Personne[]//un document peut contenir plusieurs personnes
  user     User      @relation(fields: [userId], references: [id])//un document est generer par un et un seul user
  userId   Int
}


model DocumentPersonne {
  id          Int       @id @default(autoincrement())
  fonction    String
  document    Document  @relation(fields: [documentId], references: [id])
  documentId  Int
  personne    Personne  @relation(fields: [personneId], references: [id])
  personneId  Int
}

model Mairie {
  id       Int    @id @default(autoincrement())
  ville    String
  commune  String
  logo     String
  region   String
  prefecture String
  users    User[] // Une mairie peut avoir plusieurs utilisateurs
}










