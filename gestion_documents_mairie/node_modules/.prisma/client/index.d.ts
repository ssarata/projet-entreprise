
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Personne
 * 
 */
export type Personne = $Result.DefaultSelection<Prisma.$PersonnePayload>
/**
 * Model DocumentTemplate
 * 
 */
export type DocumentTemplate = $Result.DefaultSelection<Prisma.$DocumentTemplatePayload>
/**
 * Model Variable
 * 
 */
export type Variable = $Result.DefaultSelection<Prisma.$VariablePayload>
/**
 * Model DocumentTemplateVariable
 * 
 */
export type DocumentTemplateVariable = $Result.DefaultSelection<Prisma.$DocumentTemplateVariablePayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model DocumentPersonne
 * 
 */
export type DocumentPersonne = $Result.DefaultSelection<Prisma.$DocumentPersonnePayload>
/**
 * Model Mairie
 * 
 */
export type Mairie = $Result.DefaultSelection<Prisma.$MairiePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.personne`: Exposes CRUD operations for the **Personne** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Personnes
    * const personnes = await prisma.personne.findMany()
    * ```
    */
  get personne(): Prisma.PersonneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documentTemplate`: Exposes CRUD operations for the **DocumentTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentTemplates
    * const documentTemplates = await prisma.documentTemplate.findMany()
    * ```
    */
  get documentTemplate(): Prisma.DocumentTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.variable`: Exposes CRUD operations for the **Variable** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Variables
    * const variables = await prisma.variable.findMany()
    * ```
    */
  get variable(): Prisma.VariableDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documentTemplateVariable`: Exposes CRUD operations for the **DocumentTemplateVariable** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentTemplateVariables
    * const documentTemplateVariables = await prisma.documentTemplateVariable.findMany()
    * ```
    */
  get documentTemplateVariable(): Prisma.DocumentTemplateVariableDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documentPersonne`: Exposes CRUD operations for the **DocumentPersonne** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentPersonnes
    * const documentPersonnes = await prisma.documentPersonne.findMany()
    * ```
    */
  get documentPersonne(): Prisma.DocumentPersonneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mairie`: Exposes CRUD operations for the **Mairie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mairies
    * const mairies = await prisma.mairie.findMany()
    * ```
    */
  get mairie(): Prisma.MairieDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Personne: 'Personne',
    DocumentTemplate: 'DocumentTemplate',
    Variable: 'Variable',
    DocumentTemplateVariable: 'DocumentTemplateVariable',
    Document: 'Document',
    DocumentPersonne: 'DocumentPersonne',
    Mairie: 'Mairie'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "personne" | "documentTemplate" | "variable" | "documentTemplateVariable" | "document" | "documentPersonne" | "mairie"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Personne: {
        payload: Prisma.$PersonnePayload<ExtArgs>
        fields: Prisma.PersonneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnePayload>
          }
          findFirst: {
            args: Prisma.PersonneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnePayload>
          }
          findMany: {
            args: Prisma.PersonneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnePayload>[]
          }
          create: {
            args: Prisma.PersonneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnePayload>
          }
          createMany: {
            args: Prisma.PersonneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PersonneCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnePayload>[]
          }
          delete: {
            args: Prisma.PersonneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnePayload>
          }
          update: {
            args: Prisma.PersonneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnePayload>
          }
          deleteMany: {
            args: Prisma.PersonneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PersonneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PersonneUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnePayload>[]
          }
          upsert: {
            args: Prisma.PersonneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnePayload>
          }
          aggregate: {
            args: Prisma.PersonneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePersonne>
          }
          groupBy: {
            args: Prisma.PersonneGroupByArgs<ExtArgs>
            result: $Utils.Optional<PersonneGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonneCountArgs<ExtArgs>
            result: $Utils.Optional<PersonneCountAggregateOutputType> | number
          }
        }
      }
      DocumentTemplate: {
        payload: Prisma.$DocumentTemplatePayload<ExtArgs>
        fields: Prisma.DocumentTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          findFirst: {
            args: Prisma.DocumentTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          findMany: {
            args: Prisma.DocumentTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>[]
          }
          create: {
            args: Prisma.DocumentTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          createMany: {
            args: Prisma.DocumentTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>[]
          }
          delete: {
            args: Prisma.DocumentTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          update: {
            args: Prisma.DocumentTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          deleteMany: {
            args: Prisma.DocumentTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>[]
          }
          upsert: {
            args: Prisma.DocumentTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplatePayload>
          }
          aggregate: {
            args: Prisma.DocumentTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentTemplate>
          }
          groupBy: {
            args: Prisma.DocumentTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentTemplateCountAggregateOutputType> | number
          }
        }
      }
      Variable: {
        payload: Prisma.$VariablePayload<ExtArgs>
        fields: Prisma.VariableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VariableFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VariableFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>
          }
          findFirst: {
            args: Prisma.VariableFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VariableFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>
          }
          findMany: {
            args: Prisma.VariableFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>[]
          }
          create: {
            args: Prisma.VariableCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>
          }
          createMany: {
            args: Prisma.VariableCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VariableCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>[]
          }
          delete: {
            args: Prisma.VariableDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>
          }
          update: {
            args: Prisma.VariableUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>
          }
          deleteMany: {
            args: Prisma.VariableDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VariableUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VariableUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>[]
          }
          upsert: {
            args: Prisma.VariableUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>
          }
          aggregate: {
            args: Prisma.VariableAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVariable>
          }
          groupBy: {
            args: Prisma.VariableGroupByArgs<ExtArgs>
            result: $Utils.Optional<VariableGroupByOutputType>[]
          }
          count: {
            args: Prisma.VariableCountArgs<ExtArgs>
            result: $Utils.Optional<VariableCountAggregateOutputType> | number
          }
        }
      }
      DocumentTemplateVariable: {
        payload: Prisma.$DocumentTemplateVariablePayload<ExtArgs>
        fields: Prisma.DocumentTemplateVariableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentTemplateVariableFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplateVariablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentTemplateVariableFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplateVariablePayload>
          }
          findFirst: {
            args: Prisma.DocumentTemplateVariableFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplateVariablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentTemplateVariableFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplateVariablePayload>
          }
          findMany: {
            args: Prisma.DocumentTemplateVariableFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplateVariablePayload>[]
          }
          create: {
            args: Prisma.DocumentTemplateVariableCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplateVariablePayload>
          }
          createMany: {
            args: Prisma.DocumentTemplateVariableCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentTemplateVariableCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplateVariablePayload>[]
          }
          delete: {
            args: Prisma.DocumentTemplateVariableDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplateVariablePayload>
          }
          update: {
            args: Prisma.DocumentTemplateVariableUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplateVariablePayload>
          }
          deleteMany: {
            args: Prisma.DocumentTemplateVariableDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentTemplateVariableUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentTemplateVariableUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplateVariablePayload>[]
          }
          upsert: {
            args: Prisma.DocumentTemplateVariableUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTemplateVariablePayload>
          }
          aggregate: {
            args: Prisma.DocumentTemplateVariableAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentTemplateVariable>
          }
          groupBy: {
            args: Prisma.DocumentTemplateVariableGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentTemplateVariableGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentTemplateVariableCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentTemplateVariableCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      DocumentPersonne: {
        payload: Prisma.$DocumentPersonnePayload<ExtArgs>
        fields: Prisma.DocumentPersonneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentPersonneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPersonnePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentPersonneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPersonnePayload>
          }
          findFirst: {
            args: Prisma.DocumentPersonneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPersonnePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentPersonneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPersonnePayload>
          }
          findMany: {
            args: Prisma.DocumentPersonneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPersonnePayload>[]
          }
          create: {
            args: Prisma.DocumentPersonneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPersonnePayload>
          }
          createMany: {
            args: Prisma.DocumentPersonneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentPersonneCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPersonnePayload>[]
          }
          delete: {
            args: Prisma.DocumentPersonneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPersonnePayload>
          }
          update: {
            args: Prisma.DocumentPersonneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPersonnePayload>
          }
          deleteMany: {
            args: Prisma.DocumentPersonneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentPersonneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentPersonneUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPersonnePayload>[]
          }
          upsert: {
            args: Prisma.DocumentPersonneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPersonnePayload>
          }
          aggregate: {
            args: Prisma.DocumentPersonneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentPersonne>
          }
          groupBy: {
            args: Prisma.DocumentPersonneGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentPersonneGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentPersonneCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentPersonneCountAggregateOutputType> | number
          }
        }
      }
      Mairie: {
        payload: Prisma.$MairiePayload<ExtArgs>
        fields: Prisma.MairieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MairieFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MairiePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MairieFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MairiePayload>
          }
          findFirst: {
            args: Prisma.MairieFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MairiePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MairieFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MairiePayload>
          }
          findMany: {
            args: Prisma.MairieFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MairiePayload>[]
          }
          create: {
            args: Prisma.MairieCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MairiePayload>
          }
          createMany: {
            args: Prisma.MairieCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MairieCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MairiePayload>[]
          }
          delete: {
            args: Prisma.MairieDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MairiePayload>
          }
          update: {
            args: Prisma.MairieUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MairiePayload>
          }
          deleteMany: {
            args: Prisma.MairieDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MairieUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MairieUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MairiePayload>[]
          }
          upsert: {
            args: Prisma.MairieUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MairiePayload>
          }
          aggregate: {
            args: Prisma.MairieAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMairie>
          }
          groupBy: {
            args: Prisma.MairieGroupByArgs<ExtArgs>
            result: $Utils.Optional<MairieGroupByOutputType>[]
          }
          count: {
            args: Prisma.MairieCountArgs<ExtArgs>
            result: $Utils.Optional<MairieCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    personne?: PersonneOmit
    documentTemplate?: DocumentTemplateOmit
    variable?: VariableOmit
    documentTemplateVariable?: DocumentTemplateVariableOmit
    document?: DocumentOmit
    documentPersonne?: DocumentPersonneOmit
    mairie?: MairieOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    documents: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | UserCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }


  /**
   * Count Type PersonneCountOutputType
   */

  export type PersonneCountOutputType = {
    documents: number
  }

  export type PersonneCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | PersonneCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * PersonneCountOutputType without action
   */
  export type PersonneCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonneCountOutputType
     */
    select?: PersonneCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PersonneCountOutputType without action
   */
  export type PersonneCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentPersonneWhereInput
  }


  /**
   * Count Type DocumentTemplateCountOutputType
   */

  export type DocumentTemplateCountOutputType = {
    documents: number
    documentTemplateVariables: number
  }

  export type DocumentTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | DocumentTemplateCountOutputTypeCountDocumentsArgs
    documentTemplateVariables?: boolean | DocumentTemplateCountOutputTypeCountDocumentTemplateVariablesArgs
  }

  // Custom InputTypes
  /**
   * DocumentTemplateCountOutputType without action
   */
  export type DocumentTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateCountOutputType
     */
    select?: DocumentTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentTemplateCountOutputType without action
   */
  export type DocumentTemplateCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * DocumentTemplateCountOutputType without action
   */
  export type DocumentTemplateCountOutputTypeCountDocumentTemplateVariablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentTemplateVariableWhereInput
  }


  /**
   * Count Type VariableCountOutputType
   */

  export type VariableCountOutputType = {
    documentTemplateVariables: number
  }

  export type VariableCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentTemplateVariables?: boolean | VariableCountOutputTypeCountDocumentTemplateVariablesArgs
  }

  // Custom InputTypes
  /**
   * VariableCountOutputType without action
   */
  export type VariableCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariableCountOutputType
     */
    select?: VariableCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VariableCountOutputType without action
   */
  export type VariableCountOutputTypeCountDocumentTemplateVariablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentTemplateVariableWhereInput
  }


  /**
   * Count Type DocumentCountOutputType
   */

  export type DocumentCountOutputType = {
    personnes: number
  }

  export type DocumentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personnes?: boolean | DocumentCountOutputTypeCountPersonnesArgs
  }

  // Custom InputTypes
  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentCountOutputType
     */
    select?: DocumentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeCountPersonnesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentPersonneWhereInput
  }


  /**
   * Count Type MairieCountOutputType
   */

  export type MairieCountOutputType = {
    users: number
  }

  export type MairieCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | MairieCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * MairieCountOutputType without action
   */
  export type MairieCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MairieCountOutputType
     */
    select?: MairieCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MairieCountOutputType without action
   */
  export type MairieCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    mairieId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    mairieId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    mairieId: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    mairieId: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    mairieId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    mairieId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    mairieId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    mairieId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    mairieId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    mairieId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    mairieId: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    mairieId?: boolean
    personne?: boolean | PersonneDefaultArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    mairie?: boolean | User$mairieArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    mairieId?: boolean
    personne?: boolean | PersonneDefaultArgs<ExtArgs>
    mairie?: boolean | User$mairieArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    mairieId?: boolean
    personne?: boolean | PersonneDefaultArgs<ExtArgs>
    mairie?: boolean | User$mairieArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    mairieId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "mairieId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personne?: boolean | PersonneDefaultArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    mairie?: boolean | User$mairieArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personne?: boolean | PersonneDefaultArgs<ExtArgs>
    mairie?: boolean | User$mairieArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personne?: boolean | PersonneDefaultArgs<ExtArgs>
    mairie?: boolean | User$mairieArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      personne: Prisma.$PersonnePayload<ExtArgs>
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      mairie: Prisma.$MairiePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      mairieId: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    personne<T extends PersonneDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonneDefaultArgs<ExtArgs>>): Prisma__PersonneClient<$Result.GetResult<Prisma.$PersonnePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    documents<T extends User$documentsArgs<ExtArgs> = {}>(args?: Subset<T, User$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mairie<T extends User$mairieArgs<ExtArgs> = {}>(args?: Subset<T, User$mairieArgs<ExtArgs>>): Prisma__MairieClient<$Result.GetResult<Prisma.$MairiePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly mairieId: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.documents
   */
  export type User$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * User.mairie
   */
  export type User$mairieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mairie
     */
    select?: MairieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mairie
     */
    omit?: MairieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MairieInclude<ExtArgs> | null
    where?: MairieWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Personne
   */

  export type AggregatePersonne = {
    _count: PersonneCountAggregateOutputType | null
    _avg: PersonneAvgAggregateOutputType | null
    _sum: PersonneSumAggregateOutputType | null
    _min: PersonneMinAggregateOutputType | null
    _max: PersonneMaxAggregateOutputType | null
  }

  export type PersonneAvgAggregateOutputType = {
    id: number | null
  }

  export type PersonneSumAggregateOutputType = {
    id: number | null
  }

  export type PersonneMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    profession: string | null
    adresse: string | null
    telephone: string | null
    dateNaissance: string | null
    nationalite: string | null
    numeroCni: string | null
    sexe: string | null
    lieuNaissance: string | null
  }

  export type PersonneMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    profession: string | null
    adresse: string | null
    telephone: string | null
    dateNaissance: string | null
    nationalite: string | null
    numeroCni: string | null
    sexe: string | null
    lieuNaissance: string | null
  }

  export type PersonneCountAggregateOutputType = {
    id: number
    nom: number
    prenom: number
    profession: number
    adresse: number
    telephone: number
    dateNaissance: number
    nationalite: number
    numeroCni: number
    sexe: number
    lieuNaissance: number
    _all: number
  }


  export type PersonneAvgAggregateInputType = {
    id?: true
  }

  export type PersonneSumAggregateInputType = {
    id?: true
  }

  export type PersonneMinAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    profession?: true
    adresse?: true
    telephone?: true
    dateNaissance?: true
    nationalite?: true
    numeroCni?: true
    sexe?: true
    lieuNaissance?: true
  }

  export type PersonneMaxAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    profession?: true
    adresse?: true
    telephone?: true
    dateNaissance?: true
    nationalite?: true
    numeroCni?: true
    sexe?: true
    lieuNaissance?: true
  }

  export type PersonneCountAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    profession?: true
    adresse?: true
    telephone?: true
    dateNaissance?: true
    nationalite?: true
    numeroCni?: true
    sexe?: true
    lieuNaissance?: true
    _all?: true
  }

  export type PersonneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Personne to aggregate.
     */
    where?: PersonneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personnes to fetch.
     */
    orderBy?: PersonneOrderByWithRelationInput | PersonneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personnes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personnes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Personnes
    **/
    _count?: true | PersonneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonneMaxAggregateInputType
  }

  export type GetPersonneAggregateType<T extends PersonneAggregateArgs> = {
        [P in keyof T & keyof AggregatePersonne]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersonne[P]>
      : GetScalarType<T[P], AggregatePersonne[P]>
  }




  export type PersonneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonneWhereInput
    orderBy?: PersonneOrderByWithAggregationInput | PersonneOrderByWithAggregationInput[]
    by: PersonneScalarFieldEnum[] | PersonneScalarFieldEnum
    having?: PersonneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonneCountAggregateInputType | true
    _avg?: PersonneAvgAggregateInputType
    _sum?: PersonneSumAggregateInputType
    _min?: PersonneMinAggregateInputType
    _max?: PersonneMaxAggregateInputType
  }

  export type PersonneGroupByOutputType = {
    id: number
    nom: string
    prenom: string
    profession: string | null
    adresse: string | null
    telephone: string | null
    dateNaissance: string | null
    nationalite: string | null
    numeroCni: string | null
    sexe: string | null
    lieuNaissance: string | null
    _count: PersonneCountAggregateOutputType | null
    _avg: PersonneAvgAggregateOutputType | null
    _sum: PersonneSumAggregateOutputType | null
    _min: PersonneMinAggregateOutputType | null
    _max: PersonneMaxAggregateOutputType | null
  }

  type GetPersonneGroupByPayload<T extends PersonneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonneGroupByOutputType[P]>
            : GetScalarType<T[P], PersonneGroupByOutputType[P]>
        }
      >
    >


  export type PersonneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    profession?: boolean
    adresse?: boolean
    telephone?: boolean
    dateNaissance?: boolean
    nationalite?: boolean
    numeroCni?: boolean
    sexe?: boolean
    lieuNaissance?: boolean
    user?: boolean | Personne$userArgs<ExtArgs>
    documents?: boolean | Personne$documentsArgs<ExtArgs>
    _count?: boolean | PersonneCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personne"]>

  export type PersonneSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    profession?: boolean
    adresse?: boolean
    telephone?: boolean
    dateNaissance?: boolean
    nationalite?: boolean
    numeroCni?: boolean
    sexe?: boolean
    lieuNaissance?: boolean
  }, ExtArgs["result"]["personne"]>

  export type PersonneSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    profession?: boolean
    adresse?: boolean
    telephone?: boolean
    dateNaissance?: boolean
    nationalite?: boolean
    numeroCni?: boolean
    sexe?: boolean
    lieuNaissance?: boolean
  }, ExtArgs["result"]["personne"]>

  export type PersonneSelectScalar = {
    id?: boolean
    nom?: boolean
    prenom?: boolean
    profession?: boolean
    adresse?: boolean
    telephone?: boolean
    dateNaissance?: boolean
    nationalite?: boolean
    numeroCni?: boolean
    sexe?: boolean
    lieuNaissance?: boolean
  }

  export type PersonneOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "prenom" | "profession" | "adresse" | "telephone" | "dateNaissance" | "nationalite" | "numeroCni" | "sexe" | "lieuNaissance", ExtArgs["result"]["personne"]>
  export type PersonneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Personne$userArgs<ExtArgs>
    documents?: boolean | Personne$documentsArgs<ExtArgs>
    _count?: boolean | PersonneCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PersonneIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PersonneIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PersonnePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Personne"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      documents: Prisma.$DocumentPersonnePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      prenom: string
      profession: string | null
      adresse: string | null
      telephone: string | null
      dateNaissance: string | null
      nationalite: string | null
      numeroCni: string | null
      sexe: string | null
      lieuNaissance: string | null
    }, ExtArgs["result"]["personne"]>
    composites: {}
  }

  type PersonneGetPayload<S extends boolean | null | undefined | PersonneDefaultArgs> = $Result.GetResult<Prisma.$PersonnePayload, S>

  type PersonneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PersonneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PersonneCountAggregateInputType | true
    }

  export interface PersonneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Personne'], meta: { name: 'Personne' } }
    /**
     * Find zero or one Personne that matches the filter.
     * @param {PersonneFindUniqueArgs} args - Arguments to find a Personne
     * @example
     * // Get one Personne
     * const personne = await prisma.personne.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PersonneFindUniqueArgs>(args: SelectSubset<T, PersonneFindUniqueArgs<ExtArgs>>): Prisma__PersonneClient<$Result.GetResult<Prisma.$PersonnePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Personne that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PersonneFindUniqueOrThrowArgs} args - Arguments to find a Personne
     * @example
     * // Get one Personne
     * const personne = await prisma.personne.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PersonneFindUniqueOrThrowArgs>(args: SelectSubset<T, PersonneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PersonneClient<$Result.GetResult<Prisma.$PersonnePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Personne that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonneFindFirstArgs} args - Arguments to find a Personne
     * @example
     * // Get one Personne
     * const personne = await prisma.personne.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PersonneFindFirstArgs>(args?: SelectSubset<T, PersonneFindFirstArgs<ExtArgs>>): Prisma__PersonneClient<$Result.GetResult<Prisma.$PersonnePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Personne that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonneFindFirstOrThrowArgs} args - Arguments to find a Personne
     * @example
     * // Get one Personne
     * const personne = await prisma.personne.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PersonneFindFirstOrThrowArgs>(args?: SelectSubset<T, PersonneFindFirstOrThrowArgs<ExtArgs>>): Prisma__PersonneClient<$Result.GetResult<Prisma.$PersonnePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Personnes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Personnes
     * const personnes = await prisma.personne.findMany()
     * 
     * // Get first 10 Personnes
     * const personnes = await prisma.personne.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personneWithIdOnly = await prisma.personne.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PersonneFindManyArgs>(args?: SelectSubset<T, PersonneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonnePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Personne.
     * @param {PersonneCreateArgs} args - Arguments to create a Personne.
     * @example
     * // Create one Personne
     * const Personne = await prisma.personne.create({
     *   data: {
     *     // ... data to create a Personne
     *   }
     * })
     * 
     */
    create<T extends PersonneCreateArgs>(args: SelectSubset<T, PersonneCreateArgs<ExtArgs>>): Prisma__PersonneClient<$Result.GetResult<Prisma.$PersonnePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Personnes.
     * @param {PersonneCreateManyArgs} args - Arguments to create many Personnes.
     * @example
     * // Create many Personnes
     * const personne = await prisma.personne.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PersonneCreateManyArgs>(args?: SelectSubset<T, PersonneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Personnes and returns the data saved in the database.
     * @param {PersonneCreateManyAndReturnArgs} args - Arguments to create many Personnes.
     * @example
     * // Create many Personnes
     * const personne = await prisma.personne.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Personnes and only return the `id`
     * const personneWithIdOnly = await prisma.personne.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PersonneCreateManyAndReturnArgs>(args?: SelectSubset<T, PersonneCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonnePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Personne.
     * @param {PersonneDeleteArgs} args - Arguments to delete one Personne.
     * @example
     * // Delete one Personne
     * const Personne = await prisma.personne.delete({
     *   where: {
     *     // ... filter to delete one Personne
     *   }
     * })
     * 
     */
    delete<T extends PersonneDeleteArgs>(args: SelectSubset<T, PersonneDeleteArgs<ExtArgs>>): Prisma__PersonneClient<$Result.GetResult<Prisma.$PersonnePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Personne.
     * @param {PersonneUpdateArgs} args - Arguments to update one Personne.
     * @example
     * // Update one Personne
     * const personne = await prisma.personne.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PersonneUpdateArgs>(args: SelectSubset<T, PersonneUpdateArgs<ExtArgs>>): Prisma__PersonneClient<$Result.GetResult<Prisma.$PersonnePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Personnes.
     * @param {PersonneDeleteManyArgs} args - Arguments to filter Personnes to delete.
     * @example
     * // Delete a few Personnes
     * const { count } = await prisma.personne.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PersonneDeleteManyArgs>(args?: SelectSubset<T, PersonneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Personnes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Personnes
     * const personne = await prisma.personne.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PersonneUpdateManyArgs>(args: SelectSubset<T, PersonneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Personnes and returns the data updated in the database.
     * @param {PersonneUpdateManyAndReturnArgs} args - Arguments to update many Personnes.
     * @example
     * // Update many Personnes
     * const personne = await prisma.personne.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Personnes and only return the `id`
     * const personneWithIdOnly = await prisma.personne.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PersonneUpdateManyAndReturnArgs>(args: SelectSubset<T, PersonneUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonnePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Personne.
     * @param {PersonneUpsertArgs} args - Arguments to update or create a Personne.
     * @example
     * // Update or create a Personne
     * const personne = await prisma.personne.upsert({
     *   create: {
     *     // ... data to create a Personne
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Personne we want to update
     *   }
     * })
     */
    upsert<T extends PersonneUpsertArgs>(args: SelectSubset<T, PersonneUpsertArgs<ExtArgs>>): Prisma__PersonneClient<$Result.GetResult<Prisma.$PersonnePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Personnes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonneCountArgs} args - Arguments to filter Personnes to count.
     * @example
     * // Count the number of Personnes
     * const count = await prisma.personne.count({
     *   where: {
     *     // ... the filter for the Personnes we want to count
     *   }
     * })
    **/
    count<T extends PersonneCountArgs>(
      args?: Subset<T, PersonneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Personne.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonneAggregateArgs>(args: Subset<T, PersonneAggregateArgs>): Prisma.PrismaPromise<GetPersonneAggregateType<T>>

    /**
     * Group by Personne.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonneGroupByArgs['orderBy'] }
        : { orderBy?: PersonneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Personne model
   */
  readonly fields: PersonneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Personne.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Personne$userArgs<ExtArgs> = {}>(args?: Subset<T, Personne$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    documents<T extends Personne$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Personne$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPersonnePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Personne model
   */
  interface PersonneFieldRefs {
    readonly id: FieldRef<"Personne", 'Int'>
    readonly nom: FieldRef<"Personne", 'String'>
    readonly prenom: FieldRef<"Personne", 'String'>
    readonly profession: FieldRef<"Personne", 'String'>
    readonly adresse: FieldRef<"Personne", 'String'>
    readonly telephone: FieldRef<"Personne", 'String'>
    readonly dateNaissance: FieldRef<"Personne", 'String'>
    readonly nationalite: FieldRef<"Personne", 'String'>
    readonly numeroCni: FieldRef<"Personne", 'String'>
    readonly sexe: FieldRef<"Personne", 'String'>
    readonly lieuNaissance: FieldRef<"Personne", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Personne findUnique
   */
  export type PersonneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personne
     */
    select?: PersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personne
     */
    omit?: PersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonneInclude<ExtArgs> | null
    /**
     * Filter, which Personne to fetch.
     */
    where: PersonneWhereUniqueInput
  }

  /**
   * Personne findUniqueOrThrow
   */
  export type PersonneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personne
     */
    select?: PersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personne
     */
    omit?: PersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonneInclude<ExtArgs> | null
    /**
     * Filter, which Personne to fetch.
     */
    where: PersonneWhereUniqueInput
  }

  /**
   * Personne findFirst
   */
  export type PersonneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personne
     */
    select?: PersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personne
     */
    omit?: PersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonneInclude<ExtArgs> | null
    /**
     * Filter, which Personne to fetch.
     */
    where?: PersonneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personnes to fetch.
     */
    orderBy?: PersonneOrderByWithRelationInput | PersonneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Personnes.
     */
    cursor?: PersonneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personnes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personnes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Personnes.
     */
    distinct?: PersonneScalarFieldEnum | PersonneScalarFieldEnum[]
  }

  /**
   * Personne findFirstOrThrow
   */
  export type PersonneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personne
     */
    select?: PersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personne
     */
    omit?: PersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonneInclude<ExtArgs> | null
    /**
     * Filter, which Personne to fetch.
     */
    where?: PersonneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personnes to fetch.
     */
    orderBy?: PersonneOrderByWithRelationInput | PersonneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Personnes.
     */
    cursor?: PersonneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personnes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personnes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Personnes.
     */
    distinct?: PersonneScalarFieldEnum | PersonneScalarFieldEnum[]
  }

  /**
   * Personne findMany
   */
  export type PersonneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personne
     */
    select?: PersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personne
     */
    omit?: PersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonneInclude<ExtArgs> | null
    /**
     * Filter, which Personnes to fetch.
     */
    where?: PersonneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personnes to fetch.
     */
    orderBy?: PersonneOrderByWithRelationInput | PersonneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Personnes.
     */
    cursor?: PersonneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personnes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personnes.
     */
    skip?: number
    distinct?: PersonneScalarFieldEnum | PersonneScalarFieldEnum[]
  }

  /**
   * Personne create
   */
  export type PersonneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personne
     */
    select?: PersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personne
     */
    omit?: PersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonneInclude<ExtArgs> | null
    /**
     * The data needed to create a Personne.
     */
    data: XOR<PersonneCreateInput, PersonneUncheckedCreateInput>
  }

  /**
   * Personne createMany
   */
  export type PersonneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Personnes.
     */
    data: PersonneCreateManyInput | PersonneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Personne createManyAndReturn
   */
  export type PersonneCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personne
     */
    select?: PersonneSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Personne
     */
    omit?: PersonneOmit<ExtArgs> | null
    /**
     * The data used to create many Personnes.
     */
    data: PersonneCreateManyInput | PersonneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Personne update
   */
  export type PersonneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personne
     */
    select?: PersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personne
     */
    omit?: PersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonneInclude<ExtArgs> | null
    /**
     * The data needed to update a Personne.
     */
    data: XOR<PersonneUpdateInput, PersonneUncheckedUpdateInput>
    /**
     * Choose, which Personne to update.
     */
    where: PersonneWhereUniqueInput
  }

  /**
   * Personne updateMany
   */
  export type PersonneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Personnes.
     */
    data: XOR<PersonneUpdateManyMutationInput, PersonneUncheckedUpdateManyInput>
    /**
     * Filter which Personnes to update
     */
    where?: PersonneWhereInput
    /**
     * Limit how many Personnes to update.
     */
    limit?: number
  }

  /**
   * Personne updateManyAndReturn
   */
  export type PersonneUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personne
     */
    select?: PersonneSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Personne
     */
    omit?: PersonneOmit<ExtArgs> | null
    /**
     * The data used to update Personnes.
     */
    data: XOR<PersonneUpdateManyMutationInput, PersonneUncheckedUpdateManyInput>
    /**
     * Filter which Personnes to update
     */
    where?: PersonneWhereInput
    /**
     * Limit how many Personnes to update.
     */
    limit?: number
  }

  /**
   * Personne upsert
   */
  export type PersonneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personne
     */
    select?: PersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personne
     */
    omit?: PersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonneInclude<ExtArgs> | null
    /**
     * The filter to search for the Personne to update in case it exists.
     */
    where: PersonneWhereUniqueInput
    /**
     * In case the Personne found by the `where` argument doesn't exist, create a new Personne with this data.
     */
    create: XOR<PersonneCreateInput, PersonneUncheckedCreateInput>
    /**
     * In case the Personne was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonneUpdateInput, PersonneUncheckedUpdateInput>
  }

  /**
   * Personne delete
   */
  export type PersonneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personne
     */
    select?: PersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personne
     */
    omit?: PersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonneInclude<ExtArgs> | null
    /**
     * Filter which Personne to delete.
     */
    where: PersonneWhereUniqueInput
  }

  /**
   * Personne deleteMany
   */
  export type PersonneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Personnes to delete
     */
    where?: PersonneWhereInput
    /**
     * Limit how many Personnes to delete.
     */
    limit?: number
  }

  /**
   * Personne.user
   */
  export type Personne$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Personne.documents
   */
  export type Personne$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPersonne
     */
    select?: DocumentPersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentPersonne
     */
    omit?: DocumentPersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPersonneInclude<ExtArgs> | null
    where?: DocumentPersonneWhereInput
    orderBy?: DocumentPersonneOrderByWithRelationInput | DocumentPersonneOrderByWithRelationInput[]
    cursor?: DocumentPersonneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentPersonneScalarFieldEnum | DocumentPersonneScalarFieldEnum[]
  }

  /**
   * Personne without action
   */
  export type PersonneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personne
     */
    select?: PersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Personne
     */
    omit?: PersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonneInclude<ExtArgs> | null
  }


  /**
   * Model DocumentTemplate
   */

  export type AggregateDocumentTemplate = {
    _count: DocumentTemplateCountAggregateOutputType | null
    _avg: DocumentTemplateAvgAggregateOutputType | null
    _sum: DocumentTemplateSumAggregateOutputType | null
    _min: DocumentTemplateMinAggregateOutputType | null
    _max: DocumentTemplateMaxAggregateOutputType | null
  }

  export type DocumentTemplateAvgAggregateOutputType = {
    id: number | null
  }

  export type DocumentTemplateSumAggregateOutputType = {
    id: number | null
  }

  export type DocumentTemplateMinAggregateOutputType = {
    id: number | null
    content: string | null
    typeDocument: string | null
  }

  export type DocumentTemplateMaxAggregateOutputType = {
    id: number | null
    content: string | null
    typeDocument: string | null
  }

  export type DocumentTemplateCountAggregateOutputType = {
    id: number
    content: number
    typeDocument: number
    _all: number
  }


  export type DocumentTemplateAvgAggregateInputType = {
    id?: true
  }

  export type DocumentTemplateSumAggregateInputType = {
    id?: true
  }

  export type DocumentTemplateMinAggregateInputType = {
    id?: true
    content?: true
    typeDocument?: true
  }

  export type DocumentTemplateMaxAggregateInputType = {
    id?: true
    content?: true
    typeDocument?: true
  }

  export type DocumentTemplateCountAggregateInputType = {
    id?: true
    content?: true
    typeDocument?: true
    _all?: true
  }

  export type DocumentTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentTemplate to aggregate.
     */
    where?: DocumentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplates to fetch.
     */
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentTemplates
    **/
    _count?: true | DocumentTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentTemplateMaxAggregateInputType
  }

  export type GetDocumentTemplateAggregateType<T extends DocumentTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentTemplate[P]>
      : GetScalarType<T[P], AggregateDocumentTemplate[P]>
  }




  export type DocumentTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentTemplateWhereInput
    orderBy?: DocumentTemplateOrderByWithAggregationInput | DocumentTemplateOrderByWithAggregationInput[]
    by: DocumentTemplateScalarFieldEnum[] | DocumentTemplateScalarFieldEnum
    having?: DocumentTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentTemplateCountAggregateInputType | true
    _avg?: DocumentTemplateAvgAggregateInputType
    _sum?: DocumentTemplateSumAggregateInputType
    _min?: DocumentTemplateMinAggregateInputType
    _max?: DocumentTemplateMaxAggregateInputType
  }

  export type DocumentTemplateGroupByOutputType = {
    id: number
    content: string
    typeDocument: string
    _count: DocumentTemplateCountAggregateOutputType | null
    _avg: DocumentTemplateAvgAggregateOutputType | null
    _sum: DocumentTemplateSumAggregateOutputType | null
    _min: DocumentTemplateMinAggregateOutputType | null
    _max: DocumentTemplateMaxAggregateOutputType | null
  }

  type GetDocumentTemplateGroupByPayload<T extends DocumentTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentTemplateGroupByOutputType[P]>
        }
      >
    >


  export type DocumentTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    typeDocument?: boolean
    documents?: boolean | DocumentTemplate$documentsArgs<ExtArgs>
    documentTemplateVariables?: boolean | DocumentTemplate$documentTemplateVariablesArgs<ExtArgs>
    _count?: boolean | DocumentTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentTemplate"]>

  export type DocumentTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    typeDocument?: boolean
  }, ExtArgs["result"]["documentTemplate"]>

  export type DocumentTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    typeDocument?: boolean
  }, ExtArgs["result"]["documentTemplate"]>

  export type DocumentTemplateSelectScalar = {
    id?: boolean
    content?: boolean
    typeDocument?: boolean
  }

  export type DocumentTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "typeDocument", ExtArgs["result"]["documentTemplate"]>
  export type DocumentTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | DocumentTemplate$documentsArgs<ExtArgs>
    documentTemplateVariables?: boolean | DocumentTemplate$documentTemplateVariablesArgs<ExtArgs>
    _count?: boolean | DocumentTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DocumentTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DocumentTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentTemplate"
    objects: {
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      documentTemplateVariables: Prisma.$DocumentTemplateVariablePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content: string
      typeDocument: string
    }, ExtArgs["result"]["documentTemplate"]>
    composites: {}
  }

  type DocumentTemplateGetPayload<S extends boolean | null | undefined | DocumentTemplateDefaultArgs> = $Result.GetResult<Prisma.$DocumentTemplatePayload, S>

  type DocumentTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentTemplateCountAggregateInputType | true
    }

  export interface DocumentTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentTemplate'], meta: { name: 'DocumentTemplate' } }
    /**
     * Find zero or one DocumentTemplate that matches the filter.
     * @param {DocumentTemplateFindUniqueArgs} args - Arguments to find a DocumentTemplate
     * @example
     * // Get one DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentTemplateFindUniqueArgs>(args: SelectSubset<T, DocumentTemplateFindUniqueArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DocumentTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentTemplateFindUniqueOrThrowArgs} args - Arguments to find a DocumentTemplate
     * @example
     * // Get one DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateFindFirstArgs} args - Arguments to find a DocumentTemplate
     * @example
     * // Get one DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentTemplateFindFirstArgs>(args?: SelectSubset<T, DocumentTemplateFindFirstArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateFindFirstOrThrowArgs} args - Arguments to find a DocumentTemplate
     * @example
     * // Get one DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DocumentTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentTemplates
     * const documentTemplates = await prisma.documentTemplate.findMany()
     * 
     * // Get first 10 DocumentTemplates
     * const documentTemplates = await prisma.documentTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentTemplateWithIdOnly = await prisma.documentTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentTemplateFindManyArgs>(args?: SelectSubset<T, DocumentTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DocumentTemplate.
     * @param {DocumentTemplateCreateArgs} args - Arguments to create a DocumentTemplate.
     * @example
     * // Create one DocumentTemplate
     * const DocumentTemplate = await prisma.documentTemplate.create({
     *   data: {
     *     // ... data to create a DocumentTemplate
     *   }
     * })
     * 
     */
    create<T extends DocumentTemplateCreateArgs>(args: SelectSubset<T, DocumentTemplateCreateArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DocumentTemplates.
     * @param {DocumentTemplateCreateManyArgs} args - Arguments to create many DocumentTemplates.
     * @example
     * // Create many DocumentTemplates
     * const documentTemplate = await prisma.documentTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentTemplateCreateManyArgs>(args?: SelectSubset<T, DocumentTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentTemplates and returns the data saved in the database.
     * @param {DocumentTemplateCreateManyAndReturnArgs} args - Arguments to create many DocumentTemplates.
     * @example
     * // Create many DocumentTemplates
     * const documentTemplate = await prisma.documentTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentTemplates and only return the `id`
     * const documentTemplateWithIdOnly = await prisma.documentTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DocumentTemplate.
     * @param {DocumentTemplateDeleteArgs} args - Arguments to delete one DocumentTemplate.
     * @example
     * // Delete one DocumentTemplate
     * const DocumentTemplate = await prisma.documentTemplate.delete({
     *   where: {
     *     // ... filter to delete one DocumentTemplate
     *   }
     * })
     * 
     */
    delete<T extends DocumentTemplateDeleteArgs>(args: SelectSubset<T, DocumentTemplateDeleteArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DocumentTemplate.
     * @param {DocumentTemplateUpdateArgs} args - Arguments to update one DocumentTemplate.
     * @example
     * // Update one DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentTemplateUpdateArgs>(args: SelectSubset<T, DocumentTemplateUpdateArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DocumentTemplates.
     * @param {DocumentTemplateDeleteManyArgs} args - Arguments to filter DocumentTemplates to delete.
     * @example
     * // Delete a few DocumentTemplates
     * const { count } = await prisma.documentTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentTemplateDeleteManyArgs>(args?: SelectSubset<T, DocumentTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentTemplates
     * const documentTemplate = await prisma.documentTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentTemplateUpdateManyArgs>(args: SelectSubset<T, DocumentTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentTemplates and returns the data updated in the database.
     * @param {DocumentTemplateUpdateManyAndReturnArgs} args - Arguments to update many DocumentTemplates.
     * @example
     * // Update many DocumentTemplates
     * const documentTemplate = await prisma.documentTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DocumentTemplates and only return the `id`
     * const documentTemplateWithIdOnly = await prisma.documentTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DocumentTemplate.
     * @param {DocumentTemplateUpsertArgs} args - Arguments to update or create a DocumentTemplate.
     * @example
     * // Update or create a DocumentTemplate
     * const documentTemplate = await prisma.documentTemplate.upsert({
     *   create: {
     *     // ... data to create a DocumentTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentTemplate we want to update
     *   }
     * })
     */
    upsert<T extends DocumentTemplateUpsertArgs>(args: SelectSubset<T, DocumentTemplateUpsertArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DocumentTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateCountArgs} args - Arguments to filter DocumentTemplates to count.
     * @example
     * // Count the number of DocumentTemplates
     * const count = await prisma.documentTemplate.count({
     *   where: {
     *     // ... the filter for the DocumentTemplates we want to count
     *   }
     * })
    **/
    count<T extends DocumentTemplateCountArgs>(
      args?: Subset<T, DocumentTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentTemplateAggregateArgs>(args: Subset<T, DocumentTemplateAggregateArgs>): Prisma.PrismaPromise<GetDocumentTemplateAggregateType<T>>

    /**
     * Group by DocumentTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentTemplateGroupByArgs['orderBy'] }
        : { orderBy?: DocumentTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentTemplate model
   */
  readonly fields: DocumentTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documents<T extends DocumentTemplate$documentsArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTemplate$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documentTemplateVariables<T extends DocumentTemplate$documentTemplateVariablesArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTemplate$documentTemplateVariablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplateVariablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentTemplate model
   */
  interface DocumentTemplateFieldRefs {
    readonly id: FieldRef<"DocumentTemplate", 'Int'>
    readonly content: FieldRef<"DocumentTemplate", 'String'>
    readonly typeDocument: FieldRef<"DocumentTemplate", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DocumentTemplate findUnique
   */
  export type DocumentTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplate
     */
    omit?: DocumentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplate to fetch.
     */
    where: DocumentTemplateWhereUniqueInput
  }

  /**
   * DocumentTemplate findUniqueOrThrow
   */
  export type DocumentTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplate
     */
    omit?: DocumentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplate to fetch.
     */
    where: DocumentTemplateWhereUniqueInput
  }

  /**
   * DocumentTemplate findFirst
   */
  export type DocumentTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplate
     */
    omit?: DocumentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplate to fetch.
     */
    where?: DocumentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplates to fetch.
     */
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTemplates.
     */
    cursor?: DocumentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTemplates.
     */
    distinct?: DocumentTemplateScalarFieldEnum | DocumentTemplateScalarFieldEnum[]
  }

  /**
   * DocumentTemplate findFirstOrThrow
   */
  export type DocumentTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplate
     */
    omit?: DocumentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplate to fetch.
     */
    where?: DocumentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplates to fetch.
     */
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTemplates.
     */
    cursor?: DocumentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTemplates.
     */
    distinct?: DocumentTemplateScalarFieldEnum | DocumentTemplateScalarFieldEnum[]
  }

  /**
   * DocumentTemplate findMany
   */
  export type DocumentTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplate
     */
    omit?: DocumentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplates to fetch.
     */
    where?: DocumentTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplates to fetch.
     */
    orderBy?: DocumentTemplateOrderByWithRelationInput | DocumentTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentTemplates.
     */
    cursor?: DocumentTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplates.
     */
    skip?: number
    distinct?: DocumentTemplateScalarFieldEnum | DocumentTemplateScalarFieldEnum[]
  }

  /**
   * DocumentTemplate create
   */
  export type DocumentTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplate
     */
    omit?: DocumentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentTemplate.
     */
    data: XOR<DocumentTemplateCreateInput, DocumentTemplateUncheckedCreateInput>
  }

  /**
   * DocumentTemplate createMany
   */
  export type DocumentTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentTemplates.
     */
    data: DocumentTemplateCreateManyInput | DocumentTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentTemplate createManyAndReturn
   */
  export type DocumentTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplate
     */
    omit?: DocumentTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many DocumentTemplates.
     */
    data: DocumentTemplateCreateManyInput | DocumentTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentTemplate update
   */
  export type DocumentTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplate
     */
    omit?: DocumentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentTemplate.
     */
    data: XOR<DocumentTemplateUpdateInput, DocumentTemplateUncheckedUpdateInput>
    /**
     * Choose, which DocumentTemplate to update.
     */
    where: DocumentTemplateWhereUniqueInput
  }

  /**
   * DocumentTemplate updateMany
   */
  export type DocumentTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentTemplates.
     */
    data: XOR<DocumentTemplateUpdateManyMutationInput, DocumentTemplateUncheckedUpdateManyInput>
    /**
     * Filter which DocumentTemplates to update
     */
    where?: DocumentTemplateWhereInput
    /**
     * Limit how many DocumentTemplates to update.
     */
    limit?: number
  }

  /**
   * DocumentTemplate updateManyAndReturn
   */
  export type DocumentTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplate
     */
    omit?: DocumentTemplateOmit<ExtArgs> | null
    /**
     * The data used to update DocumentTemplates.
     */
    data: XOR<DocumentTemplateUpdateManyMutationInput, DocumentTemplateUncheckedUpdateManyInput>
    /**
     * Filter which DocumentTemplates to update
     */
    where?: DocumentTemplateWhereInput
    /**
     * Limit how many DocumentTemplates to update.
     */
    limit?: number
  }

  /**
   * DocumentTemplate upsert
   */
  export type DocumentTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplate
     */
    omit?: DocumentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentTemplate to update in case it exists.
     */
    where: DocumentTemplateWhereUniqueInput
    /**
     * In case the DocumentTemplate found by the `where` argument doesn't exist, create a new DocumentTemplate with this data.
     */
    create: XOR<DocumentTemplateCreateInput, DocumentTemplateUncheckedCreateInput>
    /**
     * In case the DocumentTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentTemplateUpdateInput, DocumentTemplateUncheckedUpdateInput>
  }

  /**
   * DocumentTemplate delete
   */
  export type DocumentTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplate
     */
    omit?: DocumentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    /**
     * Filter which DocumentTemplate to delete.
     */
    where: DocumentTemplateWhereUniqueInput
  }

  /**
   * DocumentTemplate deleteMany
   */
  export type DocumentTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentTemplates to delete
     */
    where?: DocumentTemplateWhereInput
    /**
     * Limit how many DocumentTemplates to delete.
     */
    limit?: number
  }

  /**
   * DocumentTemplate.documents
   */
  export type DocumentTemplate$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * DocumentTemplate.documentTemplateVariables
   */
  export type DocumentTemplate$documentTemplateVariablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateVariable
     */
    select?: DocumentTemplateVariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplateVariable
     */
    omit?: DocumentTemplateVariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateVariableInclude<ExtArgs> | null
    where?: DocumentTemplateVariableWhereInput
    orderBy?: DocumentTemplateVariableOrderByWithRelationInput | DocumentTemplateVariableOrderByWithRelationInput[]
    cursor?: DocumentTemplateVariableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentTemplateVariableScalarFieldEnum | DocumentTemplateVariableScalarFieldEnum[]
  }

  /**
   * DocumentTemplate without action
   */
  export type DocumentTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplate
     */
    omit?: DocumentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
  }


  /**
   * Model Variable
   */

  export type AggregateVariable = {
    _count: VariableCountAggregateOutputType | null
    _avg: VariableAvgAggregateOutputType | null
    _sum: VariableSumAggregateOutputType | null
    _min: VariableMinAggregateOutputType | null
    _max: VariableMaxAggregateOutputType | null
  }

  export type VariableAvgAggregateOutputType = {
    id: number | null
  }

  export type VariableSumAggregateOutputType = {
    id: number | null
  }

  export type VariableMinAggregateOutputType = {
    id: number | null
    nomVariable: string | null
  }

  export type VariableMaxAggregateOutputType = {
    id: number | null
    nomVariable: string | null
  }

  export type VariableCountAggregateOutputType = {
    id: number
    nomVariable: number
    _all: number
  }


  export type VariableAvgAggregateInputType = {
    id?: true
  }

  export type VariableSumAggregateInputType = {
    id?: true
  }

  export type VariableMinAggregateInputType = {
    id?: true
    nomVariable?: true
  }

  export type VariableMaxAggregateInputType = {
    id?: true
    nomVariable?: true
  }

  export type VariableCountAggregateInputType = {
    id?: true
    nomVariable?: true
    _all?: true
  }

  export type VariableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Variable to aggregate.
     */
    where?: VariableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variables to fetch.
     */
    orderBy?: VariableOrderByWithRelationInput | VariableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VariableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Variables
    **/
    _count?: true | VariableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VariableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VariableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VariableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VariableMaxAggregateInputType
  }

  export type GetVariableAggregateType<T extends VariableAggregateArgs> = {
        [P in keyof T & keyof AggregateVariable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVariable[P]>
      : GetScalarType<T[P], AggregateVariable[P]>
  }




  export type VariableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VariableWhereInput
    orderBy?: VariableOrderByWithAggregationInput | VariableOrderByWithAggregationInput[]
    by: VariableScalarFieldEnum[] | VariableScalarFieldEnum
    having?: VariableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VariableCountAggregateInputType | true
    _avg?: VariableAvgAggregateInputType
    _sum?: VariableSumAggregateInputType
    _min?: VariableMinAggregateInputType
    _max?: VariableMaxAggregateInputType
  }

  export type VariableGroupByOutputType = {
    id: number
    nomVariable: string
    _count: VariableCountAggregateOutputType | null
    _avg: VariableAvgAggregateOutputType | null
    _sum: VariableSumAggregateOutputType | null
    _min: VariableMinAggregateOutputType | null
    _max: VariableMaxAggregateOutputType | null
  }

  type GetVariableGroupByPayload<T extends VariableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VariableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VariableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VariableGroupByOutputType[P]>
            : GetScalarType<T[P], VariableGroupByOutputType[P]>
        }
      >
    >


  export type VariableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomVariable?: boolean
    documentTemplateVariables?: boolean | Variable$documentTemplateVariablesArgs<ExtArgs>
    _count?: boolean | VariableCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["variable"]>

  export type VariableSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomVariable?: boolean
  }, ExtArgs["result"]["variable"]>

  export type VariableSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomVariable?: boolean
  }, ExtArgs["result"]["variable"]>

  export type VariableSelectScalar = {
    id?: boolean
    nomVariable?: boolean
  }

  export type VariableOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nomVariable", ExtArgs["result"]["variable"]>
  export type VariableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentTemplateVariables?: boolean | Variable$documentTemplateVariablesArgs<ExtArgs>
    _count?: boolean | VariableCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VariableIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type VariableIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VariablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Variable"
    objects: {
      documentTemplateVariables: Prisma.$DocumentTemplateVariablePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nomVariable: string
    }, ExtArgs["result"]["variable"]>
    composites: {}
  }

  type VariableGetPayload<S extends boolean | null | undefined | VariableDefaultArgs> = $Result.GetResult<Prisma.$VariablePayload, S>

  type VariableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VariableFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VariableCountAggregateInputType | true
    }

  export interface VariableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Variable'], meta: { name: 'Variable' } }
    /**
     * Find zero or one Variable that matches the filter.
     * @param {VariableFindUniqueArgs} args - Arguments to find a Variable
     * @example
     * // Get one Variable
     * const variable = await prisma.variable.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VariableFindUniqueArgs>(args: SelectSubset<T, VariableFindUniqueArgs<ExtArgs>>): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Variable that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VariableFindUniqueOrThrowArgs} args - Arguments to find a Variable
     * @example
     * // Get one Variable
     * const variable = await prisma.variable.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VariableFindUniqueOrThrowArgs>(args: SelectSubset<T, VariableFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Variable that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariableFindFirstArgs} args - Arguments to find a Variable
     * @example
     * // Get one Variable
     * const variable = await prisma.variable.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VariableFindFirstArgs>(args?: SelectSubset<T, VariableFindFirstArgs<ExtArgs>>): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Variable that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariableFindFirstOrThrowArgs} args - Arguments to find a Variable
     * @example
     * // Get one Variable
     * const variable = await prisma.variable.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VariableFindFirstOrThrowArgs>(args?: SelectSubset<T, VariableFindFirstOrThrowArgs<ExtArgs>>): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Variables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariableFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Variables
     * const variables = await prisma.variable.findMany()
     * 
     * // Get first 10 Variables
     * const variables = await prisma.variable.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const variableWithIdOnly = await prisma.variable.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VariableFindManyArgs>(args?: SelectSubset<T, VariableFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Variable.
     * @param {VariableCreateArgs} args - Arguments to create a Variable.
     * @example
     * // Create one Variable
     * const Variable = await prisma.variable.create({
     *   data: {
     *     // ... data to create a Variable
     *   }
     * })
     * 
     */
    create<T extends VariableCreateArgs>(args: SelectSubset<T, VariableCreateArgs<ExtArgs>>): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Variables.
     * @param {VariableCreateManyArgs} args - Arguments to create many Variables.
     * @example
     * // Create many Variables
     * const variable = await prisma.variable.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VariableCreateManyArgs>(args?: SelectSubset<T, VariableCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Variables and returns the data saved in the database.
     * @param {VariableCreateManyAndReturnArgs} args - Arguments to create many Variables.
     * @example
     * // Create many Variables
     * const variable = await prisma.variable.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Variables and only return the `id`
     * const variableWithIdOnly = await prisma.variable.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VariableCreateManyAndReturnArgs>(args?: SelectSubset<T, VariableCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Variable.
     * @param {VariableDeleteArgs} args - Arguments to delete one Variable.
     * @example
     * // Delete one Variable
     * const Variable = await prisma.variable.delete({
     *   where: {
     *     // ... filter to delete one Variable
     *   }
     * })
     * 
     */
    delete<T extends VariableDeleteArgs>(args: SelectSubset<T, VariableDeleteArgs<ExtArgs>>): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Variable.
     * @param {VariableUpdateArgs} args - Arguments to update one Variable.
     * @example
     * // Update one Variable
     * const variable = await prisma.variable.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VariableUpdateArgs>(args: SelectSubset<T, VariableUpdateArgs<ExtArgs>>): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Variables.
     * @param {VariableDeleteManyArgs} args - Arguments to filter Variables to delete.
     * @example
     * // Delete a few Variables
     * const { count } = await prisma.variable.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VariableDeleteManyArgs>(args?: SelectSubset<T, VariableDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Variables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Variables
     * const variable = await prisma.variable.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VariableUpdateManyArgs>(args: SelectSubset<T, VariableUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Variables and returns the data updated in the database.
     * @param {VariableUpdateManyAndReturnArgs} args - Arguments to update many Variables.
     * @example
     * // Update many Variables
     * const variable = await prisma.variable.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Variables and only return the `id`
     * const variableWithIdOnly = await prisma.variable.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VariableUpdateManyAndReturnArgs>(args: SelectSubset<T, VariableUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Variable.
     * @param {VariableUpsertArgs} args - Arguments to update or create a Variable.
     * @example
     * // Update or create a Variable
     * const variable = await prisma.variable.upsert({
     *   create: {
     *     // ... data to create a Variable
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Variable we want to update
     *   }
     * })
     */
    upsert<T extends VariableUpsertArgs>(args: SelectSubset<T, VariableUpsertArgs<ExtArgs>>): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Variables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariableCountArgs} args - Arguments to filter Variables to count.
     * @example
     * // Count the number of Variables
     * const count = await prisma.variable.count({
     *   where: {
     *     // ... the filter for the Variables we want to count
     *   }
     * })
    **/
    count<T extends VariableCountArgs>(
      args?: Subset<T, VariableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VariableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Variable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VariableAggregateArgs>(args: Subset<T, VariableAggregateArgs>): Prisma.PrismaPromise<GetVariableAggregateType<T>>

    /**
     * Group by Variable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VariableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VariableGroupByArgs['orderBy'] }
        : { orderBy?: VariableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VariableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVariableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Variable model
   */
  readonly fields: VariableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Variable.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VariableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documentTemplateVariables<T extends Variable$documentTemplateVariablesArgs<ExtArgs> = {}>(args?: Subset<T, Variable$documentTemplateVariablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplateVariablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Variable model
   */
  interface VariableFieldRefs {
    readonly id: FieldRef<"Variable", 'Int'>
    readonly nomVariable: FieldRef<"Variable", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Variable findUnique
   */
  export type VariableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variable
     */
    omit?: VariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * Filter, which Variable to fetch.
     */
    where: VariableWhereUniqueInput
  }

  /**
   * Variable findUniqueOrThrow
   */
  export type VariableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variable
     */
    omit?: VariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * Filter, which Variable to fetch.
     */
    where: VariableWhereUniqueInput
  }

  /**
   * Variable findFirst
   */
  export type VariableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variable
     */
    omit?: VariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * Filter, which Variable to fetch.
     */
    where?: VariableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variables to fetch.
     */
    orderBy?: VariableOrderByWithRelationInput | VariableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Variables.
     */
    cursor?: VariableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Variables.
     */
    distinct?: VariableScalarFieldEnum | VariableScalarFieldEnum[]
  }

  /**
   * Variable findFirstOrThrow
   */
  export type VariableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variable
     */
    omit?: VariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * Filter, which Variable to fetch.
     */
    where?: VariableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variables to fetch.
     */
    orderBy?: VariableOrderByWithRelationInput | VariableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Variables.
     */
    cursor?: VariableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Variables.
     */
    distinct?: VariableScalarFieldEnum | VariableScalarFieldEnum[]
  }

  /**
   * Variable findMany
   */
  export type VariableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variable
     */
    omit?: VariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * Filter, which Variables to fetch.
     */
    where?: VariableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variables to fetch.
     */
    orderBy?: VariableOrderByWithRelationInput | VariableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Variables.
     */
    cursor?: VariableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variables.
     */
    skip?: number
    distinct?: VariableScalarFieldEnum | VariableScalarFieldEnum[]
  }

  /**
   * Variable create
   */
  export type VariableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variable
     */
    omit?: VariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * The data needed to create a Variable.
     */
    data: XOR<VariableCreateInput, VariableUncheckedCreateInput>
  }

  /**
   * Variable createMany
   */
  export type VariableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Variables.
     */
    data: VariableCreateManyInput | VariableCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Variable createManyAndReturn
   */
  export type VariableCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Variable
     */
    omit?: VariableOmit<ExtArgs> | null
    /**
     * The data used to create many Variables.
     */
    data: VariableCreateManyInput | VariableCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Variable update
   */
  export type VariableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variable
     */
    omit?: VariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * The data needed to update a Variable.
     */
    data: XOR<VariableUpdateInput, VariableUncheckedUpdateInput>
    /**
     * Choose, which Variable to update.
     */
    where: VariableWhereUniqueInput
  }

  /**
   * Variable updateMany
   */
  export type VariableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Variables.
     */
    data: XOR<VariableUpdateManyMutationInput, VariableUncheckedUpdateManyInput>
    /**
     * Filter which Variables to update
     */
    where?: VariableWhereInput
    /**
     * Limit how many Variables to update.
     */
    limit?: number
  }

  /**
   * Variable updateManyAndReturn
   */
  export type VariableUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Variable
     */
    omit?: VariableOmit<ExtArgs> | null
    /**
     * The data used to update Variables.
     */
    data: XOR<VariableUpdateManyMutationInput, VariableUncheckedUpdateManyInput>
    /**
     * Filter which Variables to update
     */
    where?: VariableWhereInput
    /**
     * Limit how many Variables to update.
     */
    limit?: number
  }

  /**
   * Variable upsert
   */
  export type VariableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variable
     */
    omit?: VariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * The filter to search for the Variable to update in case it exists.
     */
    where: VariableWhereUniqueInput
    /**
     * In case the Variable found by the `where` argument doesn't exist, create a new Variable with this data.
     */
    create: XOR<VariableCreateInput, VariableUncheckedCreateInput>
    /**
     * In case the Variable was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VariableUpdateInput, VariableUncheckedUpdateInput>
  }

  /**
   * Variable delete
   */
  export type VariableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variable
     */
    omit?: VariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * Filter which Variable to delete.
     */
    where: VariableWhereUniqueInput
  }

  /**
   * Variable deleteMany
   */
  export type VariableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Variables to delete
     */
    where?: VariableWhereInput
    /**
     * Limit how many Variables to delete.
     */
    limit?: number
  }

  /**
   * Variable.documentTemplateVariables
   */
  export type Variable$documentTemplateVariablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateVariable
     */
    select?: DocumentTemplateVariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplateVariable
     */
    omit?: DocumentTemplateVariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateVariableInclude<ExtArgs> | null
    where?: DocumentTemplateVariableWhereInput
    orderBy?: DocumentTemplateVariableOrderByWithRelationInput | DocumentTemplateVariableOrderByWithRelationInput[]
    cursor?: DocumentTemplateVariableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentTemplateVariableScalarFieldEnum | DocumentTemplateVariableScalarFieldEnum[]
  }

  /**
   * Variable without action
   */
  export type VariableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Variable
     */
    omit?: VariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariableInclude<ExtArgs> | null
  }


  /**
   * Model DocumentTemplateVariable
   */

  export type AggregateDocumentTemplateVariable = {
    _count: DocumentTemplateVariableCountAggregateOutputType | null
    _avg: DocumentTemplateVariableAvgAggregateOutputType | null
    _sum: DocumentTemplateVariableSumAggregateOutputType | null
    _min: DocumentTemplateVariableMinAggregateOutputType | null
    _max: DocumentTemplateVariableMaxAggregateOutputType | null
  }

  export type DocumentTemplateVariableAvgAggregateOutputType = {
    id: number | null
    documentTemplateId: number | null
    variableId: number | null
  }

  export type DocumentTemplateVariableSumAggregateOutputType = {
    id: number | null
    documentTemplateId: number | null
    variableId: number | null
  }

  export type DocumentTemplateVariableMinAggregateOutputType = {
    id: number | null
    documentTemplateId: number | null
    variableId: number | null
  }

  export type DocumentTemplateVariableMaxAggregateOutputType = {
    id: number | null
    documentTemplateId: number | null
    variableId: number | null
  }

  export type DocumentTemplateVariableCountAggregateOutputType = {
    id: number
    documentTemplateId: number
    variableId: number
    _all: number
  }


  export type DocumentTemplateVariableAvgAggregateInputType = {
    id?: true
    documentTemplateId?: true
    variableId?: true
  }

  export type DocumentTemplateVariableSumAggregateInputType = {
    id?: true
    documentTemplateId?: true
    variableId?: true
  }

  export type DocumentTemplateVariableMinAggregateInputType = {
    id?: true
    documentTemplateId?: true
    variableId?: true
  }

  export type DocumentTemplateVariableMaxAggregateInputType = {
    id?: true
    documentTemplateId?: true
    variableId?: true
  }

  export type DocumentTemplateVariableCountAggregateInputType = {
    id?: true
    documentTemplateId?: true
    variableId?: true
    _all?: true
  }

  export type DocumentTemplateVariableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentTemplateVariable to aggregate.
     */
    where?: DocumentTemplateVariableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplateVariables to fetch.
     */
    orderBy?: DocumentTemplateVariableOrderByWithRelationInput | DocumentTemplateVariableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentTemplateVariableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplateVariables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplateVariables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentTemplateVariables
    **/
    _count?: true | DocumentTemplateVariableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentTemplateVariableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentTemplateVariableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentTemplateVariableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentTemplateVariableMaxAggregateInputType
  }

  export type GetDocumentTemplateVariableAggregateType<T extends DocumentTemplateVariableAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentTemplateVariable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentTemplateVariable[P]>
      : GetScalarType<T[P], AggregateDocumentTemplateVariable[P]>
  }




  export type DocumentTemplateVariableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentTemplateVariableWhereInput
    orderBy?: DocumentTemplateVariableOrderByWithAggregationInput | DocumentTemplateVariableOrderByWithAggregationInput[]
    by: DocumentTemplateVariableScalarFieldEnum[] | DocumentTemplateVariableScalarFieldEnum
    having?: DocumentTemplateVariableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentTemplateVariableCountAggregateInputType | true
    _avg?: DocumentTemplateVariableAvgAggregateInputType
    _sum?: DocumentTemplateVariableSumAggregateInputType
    _min?: DocumentTemplateVariableMinAggregateInputType
    _max?: DocumentTemplateVariableMaxAggregateInputType
  }

  export type DocumentTemplateVariableGroupByOutputType = {
    id: number
    documentTemplateId: number
    variableId: number
    _count: DocumentTemplateVariableCountAggregateOutputType | null
    _avg: DocumentTemplateVariableAvgAggregateOutputType | null
    _sum: DocumentTemplateVariableSumAggregateOutputType | null
    _min: DocumentTemplateVariableMinAggregateOutputType | null
    _max: DocumentTemplateVariableMaxAggregateOutputType | null
  }

  type GetDocumentTemplateVariableGroupByPayload<T extends DocumentTemplateVariableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentTemplateVariableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentTemplateVariableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentTemplateVariableGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentTemplateVariableGroupByOutputType[P]>
        }
      >
    >


  export type DocumentTemplateVariableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentTemplateId?: boolean
    variableId?: boolean
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
    variable?: boolean | VariableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentTemplateVariable"]>

  export type DocumentTemplateVariableSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentTemplateId?: boolean
    variableId?: boolean
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
    variable?: boolean | VariableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentTemplateVariable"]>

  export type DocumentTemplateVariableSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentTemplateId?: boolean
    variableId?: boolean
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
    variable?: boolean | VariableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentTemplateVariable"]>

  export type DocumentTemplateVariableSelectScalar = {
    id?: boolean
    documentTemplateId?: boolean
    variableId?: boolean
  }

  export type DocumentTemplateVariableOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "documentTemplateId" | "variableId", ExtArgs["result"]["documentTemplateVariable"]>
  export type DocumentTemplateVariableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
    variable?: boolean | VariableDefaultArgs<ExtArgs>
  }
  export type DocumentTemplateVariableIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
    variable?: boolean | VariableDefaultArgs<ExtArgs>
  }
  export type DocumentTemplateVariableIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentTemplate?: boolean | DocumentTemplateDefaultArgs<ExtArgs>
    variable?: boolean | VariableDefaultArgs<ExtArgs>
  }

  export type $DocumentTemplateVariablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentTemplateVariable"
    objects: {
      documentTemplate: Prisma.$DocumentTemplatePayload<ExtArgs>
      variable: Prisma.$VariablePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      documentTemplateId: number
      variableId: number
    }, ExtArgs["result"]["documentTemplateVariable"]>
    composites: {}
  }

  type DocumentTemplateVariableGetPayload<S extends boolean | null | undefined | DocumentTemplateVariableDefaultArgs> = $Result.GetResult<Prisma.$DocumentTemplateVariablePayload, S>

  type DocumentTemplateVariableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentTemplateVariableFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentTemplateVariableCountAggregateInputType | true
    }

  export interface DocumentTemplateVariableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentTemplateVariable'], meta: { name: 'DocumentTemplateVariable' } }
    /**
     * Find zero or one DocumentTemplateVariable that matches the filter.
     * @param {DocumentTemplateVariableFindUniqueArgs} args - Arguments to find a DocumentTemplateVariable
     * @example
     * // Get one DocumentTemplateVariable
     * const documentTemplateVariable = await prisma.documentTemplateVariable.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentTemplateVariableFindUniqueArgs>(args: SelectSubset<T, DocumentTemplateVariableFindUniqueArgs<ExtArgs>>): Prisma__DocumentTemplateVariableClient<$Result.GetResult<Prisma.$DocumentTemplateVariablePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DocumentTemplateVariable that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentTemplateVariableFindUniqueOrThrowArgs} args - Arguments to find a DocumentTemplateVariable
     * @example
     * // Get one DocumentTemplateVariable
     * const documentTemplateVariable = await prisma.documentTemplateVariable.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentTemplateVariableFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentTemplateVariableFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentTemplateVariableClient<$Result.GetResult<Prisma.$DocumentTemplateVariablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentTemplateVariable that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateVariableFindFirstArgs} args - Arguments to find a DocumentTemplateVariable
     * @example
     * // Get one DocumentTemplateVariable
     * const documentTemplateVariable = await prisma.documentTemplateVariable.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentTemplateVariableFindFirstArgs>(args?: SelectSubset<T, DocumentTemplateVariableFindFirstArgs<ExtArgs>>): Prisma__DocumentTemplateVariableClient<$Result.GetResult<Prisma.$DocumentTemplateVariablePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentTemplateVariable that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateVariableFindFirstOrThrowArgs} args - Arguments to find a DocumentTemplateVariable
     * @example
     * // Get one DocumentTemplateVariable
     * const documentTemplateVariable = await prisma.documentTemplateVariable.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentTemplateVariableFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentTemplateVariableFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentTemplateVariableClient<$Result.GetResult<Prisma.$DocumentTemplateVariablePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DocumentTemplateVariables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateVariableFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentTemplateVariables
     * const documentTemplateVariables = await prisma.documentTemplateVariable.findMany()
     * 
     * // Get first 10 DocumentTemplateVariables
     * const documentTemplateVariables = await prisma.documentTemplateVariable.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentTemplateVariableWithIdOnly = await prisma.documentTemplateVariable.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentTemplateVariableFindManyArgs>(args?: SelectSubset<T, DocumentTemplateVariableFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplateVariablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DocumentTemplateVariable.
     * @param {DocumentTemplateVariableCreateArgs} args - Arguments to create a DocumentTemplateVariable.
     * @example
     * // Create one DocumentTemplateVariable
     * const DocumentTemplateVariable = await prisma.documentTemplateVariable.create({
     *   data: {
     *     // ... data to create a DocumentTemplateVariable
     *   }
     * })
     * 
     */
    create<T extends DocumentTemplateVariableCreateArgs>(args: SelectSubset<T, DocumentTemplateVariableCreateArgs<ExtArgs>>): Prisma__DocumentTemplateVariableClient<$Result.GetResult<Prisma.$DocumentTemplateVariablePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DocumentTemplateVariables.
     * @param {DocumentTemplateVariableCreateManyArgs} args - Arguments to create many DocumentTemplateVariables.
     * @example
     * // Create many DocumentTemplateVariables
     * const documentTemplateVariable = await prisma.documentTemplateVariable.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentTemplateVariableCreateManyArgs>(args?: SelectSubset<T, DocumentTemplateVariableCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentTemplateVariables and returns the data saved in the database.
     * @param {DocumentTemplateVariableCreateManyAndReturnArgs} args - Arguments to create many DocumentTemplateVariables.
     * @example
     * // Create many DocumentTemplateVariables
     * const documentTemplateVariable = await prisma.documentTemplateVariable.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentTemplateVariables and only return the `id`
     * const documentTemplateVariableWithIdOnly = await prisma.documentTemplateVariable.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentTemplateVariableCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentTemplateVariableCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplateVariablePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DocumentTemplateVariable.
     * @param {DocumentTemplateVariableDeleteArgs} args - Arguments to delete one DocumentTemplateVariable.
     * @example
     * // Delete one DocumentTemplateVariable
     * const DocumentTemplateVariable = await prisma.documentTemplateVariable.delete({
     *   where: {
     *     // ... filter to delete one DocumentTemplateVariable
     *   }
     * })
     * 
     */
    delete<T extends DocumentTemplateVariableDeleteArgs>(args: SelectSubset<T, DocumentTemplateVariableDeleteArgs<ExtArgs>>): Prisma__DocumentTemplateVariableClient<$Result.GetResult<Prisma.$DocumentTemplateVariablePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DocumentTemplateVariable.
     * @param {DocumentTemplateVariableUpdateArgs} args - Arguments to update one DocumentTemplateVariable.
     * @example
     * // Update one DocumentTemplateVariable
     * const documentTemplateVariable = await prisma.documentTemplateVariable.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentTemplateVariableUpdateArgs>(args: SelectSubset<T, DocumentTemplateVariableUpdateArgs<ExtArgs>>): Prisma__DocumentTemplateVariableClient<$Result.GetResult<Prisma.$DocumentTemplateVariablePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DocumentTemplateVariables.
     * @param {DocumentTemplateVariableDeleteManyArgs} args - Arguments to filter DocumentTemplateVariables to delete.
     * @example
     * // Delete a few DocumentTemplateVariables
     * const { count } = await prisma.documentTemplateVariable.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentTemplateVariableDeleteManyArgs>(args?: SelectSubset<T, DocumentTemplateVariableDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentTemplateVariables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateVariableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentTemplateVariables
     * const documentTemplateVariable = await prisma.documentTemplateVariable.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentTemplateVariableUpdateManyArgs>(args: SelectSubset<T, DocumentTemplateVariableUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentTemplateVariables and returns the data updated in the database.
     * @param {DocumentTemplateVariableUpdateManyAndReturnArgs} args - Arguments to update many DocumentTemplateVariables.
     * @example
     * // Update many DocumentTemplateVariables
     * const documentTemplateVariable = await prisma.documentTemplateVariable.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DocumentTemplateVariables and only return the `id`
     * const documentTemplateVariableWithIdOnly = await prisma.documentTemplateVariable.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentTemplateVariableUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentTemplateVariableUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTemplateVariablePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DocumentTemplateVariable.
     * @param {DocumentTemplateVariableUpsertArgs} args - Arguments to update or create a DocumentTemplateVariable.
     * @example
     * // Update or create a DocumentTemplateVariable
     * const documentTemplateVariable = await prisma.documentTemplateVariable.upsert({
     *   create: {
     *     // ... data to create a DocumentTemplateVariable
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentTemplateVariable we want to update
     *   }
     * })
     */
    upsert<T extends DocumentTemplateVariableUpsertArgs>(args: SelectSubset<T, DocumentTemplateVariableUpsertArgs<ExtArgs>>): Prisma__DocumentTemplateVariableClient<$Result.GetResult<Prisma.$DocumentTemplateVariablePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DocumentTemplateVariables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateVariableCountArgs} args - Arguments to filter DocumentTemplateVariables to count.
     * @example
     * // Count the number of DocumentTemplateVariables
     * const count = await prisma.documentTemplateVariable.count({
     *   where: {
     *     // ... the filter for the DocumentTemplateVariables we want to count
     *   }
     * })
    **/
    count<T extends DocumentTemplateVariableCountArgs>(
      args?: Subset<T, DocumentTemplateVariableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentTemplateVariableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentTemplateVariable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateVariableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentTemplateVariableAggregateArgs>(args: Subset<T, DocumentTemplateVariableAggregateArgs>): Prisma.PrismaPromise<GetDocumentTemplateVariableAggregateType<T>>

    /**
     * Group by DocumentTemplateVariable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTemplateVariableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentTemplateVariableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentTemplateVariableGroupByArgs['orderBy'] }
        : { orderBy?: DocumentTemplateVariableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentTemplateVariableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentTemplateVariableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentTemplateVariable model
   */
  readonly fields: DocumentTemplateVariableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentTemplateVariable.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentTemplateVariableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documentTemplate<T extends DocumentTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTemplateDefaultArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    variable<T extends VariableDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VariableDefaultArgs<ExtArgs>>): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentTemplateVariable model
   */
  interface DocumentTemplateVariableFieldRefs {
    readonly id: FieldRef<"DocumentTemplateVariable", 'Int'>
    readonly documentTemplateId: FieldRef<"DocumentTemplateVariable", 'Int'>
    readonly variableId: FieldRef<"DocumentTemplateVariable", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * DocumentTemplateVariable findUnique
   */
  export type DocumentTemplateVariableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateVariable
     */
    select?: DocumentTemplateVariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplateVariable
     */
    omit?: DocumentTemplateVariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateVariableInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplateVariable to fetch.
     */
    where: DocumentTemplateVariableWhereUniqueInput
  }

  /**
   * DocumentTemplateVariable findUniqueOrThrow
   */
  export type DocumentTemplateVariableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateVariable
     */
    select?: DocumentTemplateVariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplateVariable
     */
    omit?: DocumentTemplateVariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateVariableInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplateVariable to fetch.
     */
    where: DocumentTemplateVariableWhereUniqueInput
  }

  /**
   * DocumentTemplateVariable findFirst
   */
  export type DocumentTemplateVariableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateVariable
     */
    select?: DocumentTemplateVariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplateVariable
     */
    omit?: DocumentTemplateVariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateVariableInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplateVariable to fetch.
     */
    where?: DocumentTemplateVariableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplateVariables to fetch.
     */
    orderBy?: DocumentTemplateVariableOrderByWithRelationInput | DocumentTemplateVariableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTemplateVariables.
     */
    cursor?: DocumentTemplateVariableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplateVariables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplateVariables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTemplateVariables.
     */
    distinct?: DocumentTemplateVariableScalarFieldEnum | DocumentTemplateVariableScalarFieldEnum[]
  }

  /**
   * DocumentTemplateVariable findFirstOrThrow
   */
  export type DocumentTemplateVariableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateVariable
     */
    select?: DocumentTemplateVariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplateVariable
     */
    omit?: DocumentTemplateVariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateVariableInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplateVariable to fetch.
     */
    where?: DocumentTemplateVariableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplateVariables to fetch.
     */
    orderBy?: DocumentTemplateVariableOrderByWithRelationInput | DocumentTemplateVariableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTemplateVariables.
     */
    cursor?: DocumentTemplateVariableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplateVariables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplateVariables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTemplateVariables.
     */
    distinct?: DocumentTemplateVariableScalarFieldEnum | DocumentTemplateVariableScalarFieldEnum[]
  }

  /**
   * DocumentTemplateVariable findMany
   */
  export type DocumentTemplateVariableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateVariable
     */
    select?: DocumentTemplateVariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplateVariable
     */
    omit?: DocumentTemplateVariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateVariableInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTemplateVariables to fetch.
     */
    where?: DocumentTemplateVariableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTemplateVariables to fetch.
     */
    orderBy?: DocumentTemplateVariableOrderByWithRelationInput | DocumentTemplateVariableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentTemplateVariables.
     */
    cursor?: DocumentTemplateVariableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTemplateVariables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTemplateVariables.
     */
    skip?: number
    distinct?: DocumentTemplateVariableScalarFieldEnum | DocumentTemplateVariableScalarFieldEnum[]
  }

  /**
   * DocumentTemplateVariable create
   */
  export type DocumentTemplateVariableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateVariable
     */
    select?: DocumentTemplateVariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplateVariable
     */
    omit?: DocumentTemplateVariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateVariableInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentTemplateVariable.
     */
    data: XOR<DocumentTemplateVariableCreateInput, DocumentTemplateVariableUncheckedCreateInput>
  }

  /**
   * DocumentTemplateVariable createMany
   */
  export type DocumentTemplateVariableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentTemplateVariables.
     */
    data: DocumentTemplateVariableCreateManyInput | DocumentTemplateVariableCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentTemplateVariable createManyAndReturn
   */
  export type DocumentTemplateVariableCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateVariable
     */
    select?: DocumentTemplateVariableSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplateVariable
     */
    omit?: DocumentTemplateVariableOmit<ExtArgs> | null
    /**
     * The data used to create many DocumentTemplateVariables.
     */
    data: DocumentTemplateVariableCreateManyInput | DocumentTemplateVariableCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateVariableIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentTemplateVariable update
   */
  export type DocumentTemplateVariableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateVariable
     */
    select?: DocumentTemplateVariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplateVariable
     */
    omit?: DocumentTemplateVariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateVariableInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentTemplateVariable.
     */
    data: XOR<DocumentTemplateVariableUpdateInput, DocumentTemplateVariableUncheckedUpdateInput>
    /**
     * Choose, which DocumentTemplateVariable to update.
     */
    where: DocumentTemplateVariableWhereUniqueInput
  }

  /**
   * DocumentTemplateVariable updateMany
   */
  export type DocumentTemplateVariableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentTemplateVariables.
     */
    data: XOR<DocumentTemplateVariableUpdateManyMutationInput, DocumentTemplateVariableUncheckedUpdateManyInput>
    /**
     * Filter which DocumentTemplateVariables to update
     */
    where?: DocumentTemplateVariableWhereInput
    /**
     * Limit how many DocumentTemplateVariables to update.
     */
    limit?: number
  }

  /**
   * DocumentTemplateVariable updateManyAndReturn
   */
  export type DocumentTemplateVariableUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateVariable
     */
    select?: DocumentTemplateVariableSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplateVariable
     */
    omit?: DocumentTemplateVariableOmit<ExtArgs> | null
    /**
     * The data used to update DocumentTemplateVariables.
     */
    data: XOR<DocumentTemplateVariableUpdateManyMutationInput, DocumentTemplateVariableUncheckedUpdateManyInput>
    /**
     * Filter which DocumentTemplateVariables to update
     */
    where?: DocumentTemplateVariableWhereInput
    /**
     * Limit how many DocumentTemplateVariables to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateVariableIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentTemplateVariable upsert
   */
  export type DocumentTemplateVariableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateVariable
     */
    select?: DocumentTemplateVariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplateVariable
     */
    omit?: DocumentTemplateVariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateVariableInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentTemplateVariable to update in case it exists.
     */
    where: DocumentTemplateVariableWhereUniqueInput
    /**
     * In case the DocumentTemplateVariable found by the `where` argument doesn't exist, create a new DocumentTemplateVariable with this data.
     */
    create: XOR<DocumentTemplateVariableCreateInput, DocumentTemplateVariableUncheckedCreateInput>
    /**
     * In case the DocumentTemplateVariable was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentTemplateVariableUpdateInput, DocumentTemplateVariableUncheckedUpdateInput>
  }

  /**
   * DocumentTemplateVariable delete
   */
  export type DocumentTemplateVariableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateVariable
     */
    select?: DocumentTemplateVariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplateVariable
     */
    omit?: DocumentTemplateVariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateVariableInclude<ExtArgs> | null
    /**
     * Filter which DocumentTemplateVariable to delete.
     */
    where: DocumentTemplateVariableWhereUniqueInput
  }

  /**
   * DocumentTemplateVariable deleteMany
   */
  export type DocumentTemplateVariableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentTemplateVariables to delete
     */
    where?: DocumentTemplateVariableWhereInput
    /**
     * Limit how many DocumentTemplateVariables to delete.
     */
    limit?: number
  }

  /**
   * DocumentTemplateVariable without action
   */
  export type DocumentTemplateVariableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplateVariable
     */
    select?: DocumentTemplateVariableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplateVariable
     */
    omit?: DocumentTemplateVariableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateVariableInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentAvgAggregateOutputType = {
    id: number | null
    templateId: number | null
    userId: number | null
  }

  export type DocumentSumAggregateOutputType = {
    id: number | null
    templateId: number | null
    userId: number | null
  }

  export type DocumentMinAggregateOutputType = {
    id: number | null
    date: Date | null
    identiteDuMaire: string | null
    templateId: number | null
    userId: number | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    identiteDuMaire: string | null
    templateId: number | null
    userId: number | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    date: number
    identiteDuMaire: number
    templateId: number
    userId: number
    _all: number
  }


  export type DocumentAvgAggregateInputType = {
    id?: true
    templateId?: true
    userId?: true
  }

  export type DocumentSumAggregateInputType = {
    id?: true
    templateId?: true
    userId?: true
  }

  export type DocumentMinAggregateInputType = {
    id?: true
    date?: true
    identiteDuMaire?: true
    templateId?: true
    userId?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    date?: true
    identiteDuMaire?: true
    templateId?: true
    userId?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    date?: true
    identiteDuMaire?: true
    templateId?: true
    userId?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _avg?: DocumentAvgAggregateInputType
    _sum?: DocumentSumAggregateInputType
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: number
    date: Date
    identiteDuMaire: string
    templateId: number | null
    userId: number
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    identiteDuMaire?: boolean
    templateId?: boolean
    userId?: boolean
    template?: boolean | Document$templateArgs<ExtArgs>
    personnes?: boolean | Document$personnesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    identiteDuMaire?: boolean
    templateId?: boolean
    userId?: boolean
    template?: boolean | Document$templateArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    identiteDuMaire?: boolean
    templateId?: boolean
    userId?: boolean
    template?: boolean | Document$templateArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    date?: boolean
    identiteDuMaire?: boolean
    templateId?: boolean
    userId?: boolean
  }

  export type DocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "identiteDuMaire" | "templateId" | "userId", ExtArgs["result"]["document"]>
  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | Document$templateArgs<ExtArgs>
    personnes?: boolean | Document$personnesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | Document$templateArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | Document$templateArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      template: Prisma.$DocumentTemplatePayload<ExtArgs> | null
      personnes: Prisma.$DocumentPersonnePayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      identiteDuMaire: string
      templateId: number | null
      userId: number
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents and returns the data updated in the database.
     * @param {DocumentUpdateManyAndReturnArgs} args - Arguments to update many Documents.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    template<T extends Document$templateArgs<ExtArgs> = {}>(args?: Subset<T, Document$templateArgs<ExtArgs>>): Prisma__DocumentTemplateClient<$Result.GetResult<Prisma.$DocumentTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    personnes<T extends Document$personnesArgs<ExtArgs> = {}>(args?: Subset<T, Document$personnesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPersonnePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'Int'>
    readonly date: FieldRef<"Document", 'DateTime'>
    readonly identiteDuMaire: FieldRef<"Document", 'String'>
    readonly templateId: FieldRef<"Document", 'Int'>
    readonly userId: FieldRef<"Document", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
  }

  /**
   * Document updateManyAndReturn
   */
  export type DocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to delete.
     */
    limit?: number
  }

  /**
   * Document.template
   */
  export type Document$templateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTemplate
     */
    select?: DocumentTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentTemplate
     */
    omit?: DocumentTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTemplateInclude<ExtArgs> | null
    where?: DocumentTemplateWhereInput
  }

  /**
   * Document.personnes
   */
  export type Document$personnesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPersonne
     */
    select?: DocumentPersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentPersonne
     */
    omit?: DocumentPersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPersonneInclude<ExtArgs> | null
    where?: DocumentPersonneWhereInput
    orderBy?: DocumentPersonneOrderByWithRelationInput | DocumentPersonneOrderByWithRelationInput[]
    cursor?: DocumentPersonneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentPersonneScalarFieldEnum | DocumentPersonneScalarFieldEnum[]
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model DocumentPersonne
   */

  export type AggregateDocumentPersonne = {
    _count: DocumentPersonneCountAggregateOutputType | null
    _avg: DocumentPersonneAvgAggregateOutputType | null
    _sum: DocumentPersonneSumAggregateOutputType | null
    _min: DocumentPersonneMinAggregateOutputType | null
    _max: DocumentPersonneMaxAggregateOutputType | null
  }

  export type DocumentPersonneAvgAggregateOutputType = {
    id: number | null
    documentId: number | null
    personneId: number | null
  }

  export type DocumentPersonneSumAggregateOutputType = {
    id: number | null
    documentId: number | null
    personneId: number | null
  }

  export type DocumentPersonneMinAggregateOutputType = {
    id: number | null
    fonction: string | null
    documentId: number | null
    personneId: number | null
  }

  export type DocumentPersonneMaxAggregateOutputType = {
    id: number | null
    fonction: string | null
    documentId: number | null
    personneId: number | null
  }

  export type DocumentPersonneCountAggregateOutputType = {
    id: number
    fonction: number
    documentId: number
    personneId: number
    _all: number
  }


  export type DocumentPersonneAvgAggregateInputType = {
    id?: true
    documentId?: true
    personneId?: true
  }

  export type DocumentPersonneSumAggregateInputType = {
    id?: true
    documentId?: true
    personneId?: true
  }

  export type DocumentPersonneMinAggregateInputType = {
    id?: true
    fonction?: true
    documentId?: true
    personneId?: true
  }

  export type DocumentPersonneMaxAggregateInputType = {
    id?: true
    fonction?: true
    documentId?: true
    personneId?: true
  }

  export type DocumentPersonneCountAggregateInputType = {
    id?: true
    fonction?: true
    documentId?: true
    personneId?: true
    _all?: true
  }

  export type DocumentPersonneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentPersonne to aggregate.
     */
    where?: DocumentPersonneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentPersonnes to fetch.
     */
    orderBy?: DocumentPersonneOrderByWithRelationInput | DocumentPersonneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentPersonneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentPersonnes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentPersonnes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentPersonnes
    **/
    _count?: true | DocumentPersonneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentPersonneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentPersonneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentPersonneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentPersonneMaxAggregateInputType
  }

  export type GetDocumentPersonneAggregateType<T extends DocumentPersonneAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentPersonne]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentPersonne[P]>
      : GetScalarType<T[P], AggregateDocumentPersonne[P]>
  }




  export type DocumentPersonneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentPersonneWhereInput
    orderBy?: DocumentPersonneOrderByWithAggregationInput | DocumentPersonneOrderByWithAggregationInput[]
    by: DocumentPersonneScalarFieldEnum[] | DocumentPersonneScalarFieldEnum
    having?: DocumentPersonneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentPersonneCountAggregateInputType | true
    _avg?: DocumentPersonneAvgAggregateInputType
    _sum?: DocumentPersonneSumAggregateInputType
    _min?: DocumentPersonneMinAggregateInputType
    _max?: DocumentPersonneMaxAggregateInputType
  }

  export type DocumentPersonneGroupByOutputType = {
    id: number
    fonction: string
    documentId: number
    personneId: number
    _count: DocumentPersonneCountAggregateOutputType | null
    _avg: DocumentPersonneAvgAggregateOutputType | null
    _sum: DocumentPersonneSumAggregateOutputType | null
    _min: DocumentPersonneMinAggregateOutputType | null
    _max: DocumentPersonneMaxAggregateOutputType | null
  }

  type GetDocumentPersonneGroupByPayload<T extends DocumentPersonneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentPersonneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentPersonneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentPersonneGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentPersonneGroupByOutputType[P]>
        }
      >
    >


  export type DocumentPersonneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fonction?: boolean
    documentId?: boolean
    personneId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    personne?: boolean | PersonneDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentPersonne"]>

  export type DocumentPersonneSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fonction?: boolean
    documentId?: boolean
    personneId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    personne?: boolean | PersonneDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentPersonne"]>

  export type DocumentPersonneSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fonction?: boolean
    documentId?: boolean
    personneId?: boolean
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    personne?: boolean | PersonneDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentPersonne"]>

  export type DocumentPersonneSelectScalar = {
    id?: boolean
    fonction?: boolean
    documentId?: boolean
    personneId?: boolean
  }

  export type DocumentPersonneOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fonction" | "documentId" | "personneId", ExtArgs["result"]["documentPersonne"]>
  export type DocumentPersonneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    personne?: boolean | PersonneDefaultArgs<ExtArgs>
  }
  export type DocumentPersonneIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    personne?: boolean | PersonneDefaultArgs<ExtArgs>
  }
  export type DocumentPersonneIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | DocumentDefaultArgs<ExtArgs>
    personne?: boolean | PersonneDefaultArgs<ExtArgs>
  }

  export type $DocumentPersonnePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentPersonne"
    objects: {
      document: Prisma.$DocumentPayload<ExtArgs>
      personne: Prisma.$PersonnePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fonction: string
      documentId: number
      personneId: number
    }, ExtArgs["result"]["documentPersonne"]>
    composites: {}
  }

  type DocumentPersonneGetPayload<S extends boolean | null | undefined | DocumentPersonneDefaultArgs> = $Result.GetResult<Prisma.$DocumentPersonnePayload, S>

  type DocumentPersonneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentPersonneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentPersonneCountAggregateInputType | true
    }

  export interface DocumentPersonneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentPersonne'], meta: { name: 'DocumentPersonne' } }
    /**
     * Find zero or one DocumentPersonne that matches the filter.
     * @param {DocumentPersonneFindUniqueArgs} args - Arguments to find a DocumentPersonne
     * @example
     * // Get one DocumentPersonne
     * const documentPersonne = await prisma.documentPersonne.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentPersonneFindUniqueArgs>(args: SelectSubset<T, DocumentPersonneFindUniqueArgs<ExtArgs>>): Prisma__DocumentPersonneClient<$Result.GetResult<Prisma.$DocumentPersonnePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DocumentPersonne that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentPersonneFindUniqueOrThrowArgs} args - Arguments to find a DocumentPersonne
     * @example
     * // Get one DocumentPersonne
     * const documentPersonne = await prisma.documentPersonne.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentPersonneFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentPersonneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentPersonneClient<$Result.GetResult<Prisma.$DocumentPersonnePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentPersonne that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentPersonneFindFirstArgs} args - Arguments to find a DocumentPersonne
     * @example
     * // Get one DocumentPersonne
     * const documentPersonne = await prisma.documentPersonne.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentPersonneFindFirstArgs>(args?: SelectSubset<T, DocumentPersonneFindFirstArgs<ExtArgs>>): Prisma__DocumentPersonneClient<$Result.GetResult<Prisma.$DocumentPersonnePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentPersonne that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentPersonneFindFirstOrThrowArgs} args - Arguments to find a DocumentPersonne
     * @example
     * // Get one DocumentPersonne
     * const documentPersonne = await prisma.documentPersonne.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentPersonneFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentPersonneFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentPersonneClient<$Result.GetResult<Prisma.$DocumentPersonnePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DocumentPersonnes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentPersonneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentPersonnes
     * const documentPersonnes = await prisma.documentPersonne.findMany()
     * 
     * // Get first 10 DocumentPersonnes
     * const documentPersonnes = await prisma.documentPersonne.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentPersonneWithIdOnly = await prisma.documentPersonne.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentPersonneFindManyArgs>(args?: SelectSubset<T, DocumentPersonneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPersonnePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DocumentPersonne.
     * @param {DocumentPersonneCreateArgs} args - Arguments to create a DocumentPersonne.
     * @example
     * // Create one DocumentPersonne
     * const DocumentPersonne = await prisma.documentPersonne.create({
     *   data: {
     *     // ... data to create a DocumentPersonne
     *   }
     * })
     * 
     */
    create<T extends DocumentPersonneCreateArgs>(args: SelectSubset<T, DocumentPersonneCreateArgs<ExtArgs>>): Prisma__DocumentPersonneClient<$Result.GetResult<Prisma.$DocumentPersonnePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DocumentPersonnes.
     * @param {DocumentPersonneCreateManyArgs} args - Arguments to create many DocumentPersonnes.
     * @example
     * // Create many DocumentPersonnes
     * const documentPersonne = await prisma.documentPersonne.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentPersonneCreateManyArgs>(args?: SelectSubset<T, DocumentPersonneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentPersonnes and returns the data saved in the database.
     * @param {DocumentPersonneCreateManyAndReturnArgs} args - Arguments to create many DocumentPersonnes.
     * @example
     * // Create many DocumentPersonnes
     * const documentPersonne = await prisma.documentPersonne.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentPersonnes and only return the `id`
     * const documentPersonneWithIdOnly = await prisma.documentPersonne.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentPersonneCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentPersonneCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPersonnePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DocumentPersonne.
     * @param {DocumentPersonneDeleteArgs} args - Arguments to delete one DocumentPersonne.
     * @example
     * // Delete one DocumentPersonne
     * const DocumentPersonne = await prisma.documentPersonne.delete({
     *   where: {
     *     // ... filter to delete one DocumentPersonne
     *   }
     * })
     * 
     */
    delete<T extends DocumentPersonneDeleteArgs>(args: SelectSubset<T, DocumentPersonneDeleteArgs<ExtArgs>>): Prisma__DocumentPersonneClient<$Result.GetResult<Prisma.$DocumentPersonnePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DocumentPersonne.
     * @param {DocumentPersonneUpdateArgs} args - Arguments to update one DocumentPersonne.
     * @example
     * // Update one DocumentPersonne
     * const documentPersonne = await prisma.documentPersonne.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentPersonneUpdateArgs>(args: SelectSubset<T, DocumentPersonneUpdateArgs<ExtArgs>>): Prisma__DocumentPersonneClient<$Result.GetResult<Prisma.$DocumentPersonnePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DocumentPersonnes.
     * @param {DocumentPersonneDeleteManyArgs} args - Arguments to filter DocumentPersonnes to delete.
     * @example
     * // Delete a few DocumentPersonnes
     * const { count } = await prisma.documentPersonne.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentPersonneDeleteManyArgs>(args?: SelectSubset<T, DocumentPersonneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentPersonnes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentPersonneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentPersonnes
     * const documentPersonne = await prisma.documentPersonne.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentPersonneUpdateManyArgs>(args: SelectSubset<T, DocumentPersonneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentPersonnes and returns the data updated in the database.
     * @param {DocumentPersonneUpdateManyAndReturnArgs} args - Arguments to update many DocumentPersonnes.
     * @example
     * // Update many DocumentPersonnes
     * const documentPersonne = await prisma.documentPersonne.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DocumentPersonnes and only return the `id`
     * const documentPersonneWithIdOnly = await prisma.documentPersonne.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentPersonneUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentPersonneUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPersonnePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DocumentPersonne.
     * @param {DocumentPersonneUpsertArgs} args - Arguments to update or create a DocumentPersonne.
     * @example
     * // Update or create a DocumentPersonne
     * const documentPersonne = await prisma.documentPersonne.upsert({
     *   create: {
     *     // ... data to create a DocumentPersonne
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentPersonne we want to update
     *   }
     * })
     */
    upsert<T extends DocumentPersonneUpsertArgs>(args: SelectSubset<T, DocumentPersonneUpsertArgs<ExtArgs>>): Prisma__DocumentPersonneClient<$Result.GetResult<Prisma.$DocumentPersonnePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DocumentPersonnes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentPersonneCountArgs} args - Arguments to filter DocumentPersonnes to count.
     * @example
     * // Count the number of DocumentPersonnes
     * const count = await prisma.documentPersonne.count({
     *   where: {
     *     // ... the filter for the DocumentPersonnes we want to count
     *   }
     * })
    **/
    count<T extends DocumentPersonneCountArgs>(
      args?: Subset<T, DocumentPersonneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentPersonneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentPersonne.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentPersonneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentPersonneAggregateArgs>(args: Subset<T, DocumentPersonneAggregateArgs>): Prisma.PrismaPromise<GetDocumentPersonneAggregateType<T>>

    /**
     * Group by DocumentPersonne.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentPersonneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentPersonneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentPersonneGroupByArgs['orderBy'] }
        : { orderBy?: DocumentPersonneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentPersonneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentPersonneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentPersonne model
   */
  readonly fields: DocumentPersonneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentPersonne.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentPersonneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends DocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentDefaultArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    personne<T extends PersonneDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonneDefaultArgs<ExtArgs>>): Prisma__PersonneClient<$Result.GetResult<Prisma.$PersonnePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentPersonne model
   */
  interface DocumentPersonneFieldRefs {
    readonly id: FieldRef<"DocumentPersonne", 'Int'>
    readonly fonction: FieldRef<"DocumentPersonne", 'String'>
    readonly documentId: FieldRef<"DocumentPersonne", 'Int'>
    readonly personneId: FieldRef<"DocumentPersonne", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * DocumentPersonne findUnique
   */
  export type DocumentPersonneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPersonne
     */
    select?: DocumentPersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentPersonne
     */
    omit?: DocumentPersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPersonneInclude<ExtArgs> | null
    /**
     * Filter, which DocumentPersonne to fetch.
     */
    where: DocumentPersonneWhereUniqueInput
  }

  /**
   * DocumentPersonne findUniqueOrThrow
   */
  export type DocumentPersonneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPersonne
     */
    select?: DocumentPersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentPersonne
     */
    omit?: DocumentPersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPersonneInclude<ExtArgs> | null
    /**
     * Filter, which DocumentPersonne to fetch.
     */
    where: DocumentPersonneWhereUniqueInput
  }

  /**
   * DocumentPersonne findFirst
   */
  export type DocumentPersonneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPersonne
     */
    select?: DocumentPersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentPersonne
     */
    omit?: DocumentPersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPersonneInclude<ExtArgs> | null
    /**
     * Filter, which DocumentPersonne to fetch.
     */
    where?: DocumentPersonneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentPersonnes to fetch.
     */
    orderBy?: DocumentPersonneOrderByWithRelationInput | DocumentPersonneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentPersonnes.
     */
    cursor?: DocumentPersonneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentPersonnes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentPersonnes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentPersonnes.
     */
    distinct?: DocumentPersonneScalarFieldEnum | DocumentPersonneScalarFieldEnum[]
  }

  /**
   * DocumentPersonne findFirstOrThrow
   */
  export type DocumentPersonneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPersonne
     */
    select?: DocumentPersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentPersonne
     */
    omit?: DocumentPersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPersonneInclude<ExtArgs> | null
    /**
     * Filter, which DocumentPersonne to fetch.
     */
    where?: DocumentPersonneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentPersonnes to fetch.
     */
    orderBy?: DocumentPersonneOrderByWithRelationInput | DocumentPersonneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentPersonnes.
     */
    cursor?: DocumentPersonneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentPersonnes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentPersonnes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentPersonnes.
     */
    distinct?: DocumentPersonneScalarFieldEnum | DocumentPersonneScalarFieldEnum[]
  }

  /**
   * DocumentPersonne findMany
   */
  export type DocumentPersonneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPersonne
     */
    select?: DocumentPersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentPersonne
     */
    omit?: DocumentPersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPersonneInclude<ExtArgs> | null
    /**
     * Filter, which DocumentPersonnes to fetch.
     */
    where?: DocumentPersonneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentPersonnes to fetch.
     */
    orderBy?: DocumentPersonneOrderByWithRelationInput | DocumentPersonneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentPersonnes.
     */
    cursor?: DocumentPersonneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentPersonnes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentPersonnes.
     */
    skip?: number
    distinct?: DocumentPersonneScalarFieldEnum | DocumentPersonneScalarFieldEnum[]
  }

  /**
   * DocumentPersonne create
   */
  export type DocumentPersonneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPersonne
     */
    select?: DocumentPersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentPersonne
     */
    omit?: DocumentPersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPersonneInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentPersonne.
     */
    data: XOR<DocumentPersonneCreateInput, DocumentPersonneUncheckedCreateInput>
  }

  /**
   * DocumentPersonne createMany
   */
  export type DocumentPersonneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentPersonnes.
     */
    data: DocumentPersonneCreateManyInput | DocumentPersonneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentPersonne createManyAndReturn
   */
  export type DocumentPersonneCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPersonne
     */
    select?: DocumentPersonneSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentPersonne
     */
    omit?: DocumentPersonneOmit<ExtArgs> | null
    /**
     * The data used to create many DocumentPersonnes.
     */
    data: DocumentPersonneCreateManyInput | DocumentPersonneCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPersonneIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentPersonne update
   */
  export type DocumentPersonneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPersonne
     */
    select?: DocumentPersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentPersonne
     */
    omit?: DocumentPersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPersonneInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentPersonne.
     */
    data: XOR<DocumentPersonneUpdateInput, DocumentPersonneUncheckedUpdateInput>
    /**
     * Choose, which DocumentPersonne to update.
     */
    where: DocumentPersonneWhereUniqueInput
  }

  /**
   * DocumentPersonne updateMany
   */
  export type DocumentPersonneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentPersonnes.
     */
    data: XOR<DocumentPersonneUpdateManyMutationInput, DocumentPersonneUncheckedUpdateManyInput>
    /**
     * Filter which DocumentPersonnes to update
     */
    where?: DocumentPersonneWhereInput
    /**
     * Limit how many DocumentPersonnes to update.
     */
    limit?: number
  }

  /**
   * DocumentPersonne updateManyAndReturn
   */
  export type DocumentPersonneUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPersonne
     */
    select?: DocumentPersonneSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentPersonne
     */
    omit?: DocumentPersonneOmit<ExtArgs> | null
    /**
     * The data used to update DocumentPersonnes.
     */
    data: XOR<DocumentPersonneUpdateManyMutationInput, DocumentPersonneUncheckedUpdateManyInput>
    /**
     * Filter which DocumentPersonnes to update
     */
    where?: DocumentPersonneWhereInput
    /**
     * Limit how many DocumentPersonnes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPersonneIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DocumentPersonne upsert
   */
  export type DocumentPersonneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPersonne
     */
    select?: DocumentPersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentPersonne
     */
    omit?: DocumentPersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPersonneInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentPersonne to update in case it exists.
     */
    where: DocumentPersonneWhereUniqueInput
    /**
     * In case the DocumentPersonne found by the `where` argument doesn't exist, create a new DocumentPersonne with this data.
     */
    create: XOR<DocumentPersonneCreateInput, DocumentPersonneUncheckedCreateInput>
    /**
     * In case the DocumentPersonne was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentPersonneUpdateInput, DocumentPersonneUncheckedUpdateInput>
  }

  /**
   * DocumentPersonne delete
   */
  export type DocumentPersonneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPersonne
     */
    select?: DocumentPersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentPersonne
     */
    omit?: DocumentPersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPersonneInclude<ExtArgs> | null
    /**
     * Filter which DocumentPersonne to delete.
     */
    where: DocumentPersonneWhereUniqueInput
  }

  /**
   * DocumentPersonne deleteMany
   */
  export type DocumentPersonneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentPersonnes to delete
     */
    where?: DocumentPersonneWhereInput
    /**
     * Limit how many DocumentPersonnes to delete.
     */
    limit?: number
  }

  /**
   * DocumentPersonne without action
   */
  export type DocumentPersonneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentPersonne
     */
    select?: DocumentPersonneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentPersonne
     */
    omit?: DocumentPersonneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentPersonneInclude<ExtArgs> | null
  }


  /**
   * Model Mairie
   */

  export type AggregateMairie = {
    _count: MairieCountAggregateOutputType | null
    _avg: MairieAvgAggregateOutputType | null
    _sum: MairieSumAggregateOutputType | null
    _min: MairieMinAggregateOutputType | null
    _max: MairieMaxAggregateOutputType | null
  }

  export type MairieAvgAggregateOutputType = {
    id: number | null
  }

  export type MairieSumAggregateOutputType = {
    id: number | null
  }

  export type MairieMinAggregateOutputType = {
    id: number | null
    ville: string | null
    commune: string | null
    logo: string | null
    region: string | null
    prefecture: string | null
  }

  export type MairieMaxAggregateOutputType = {
    id: number | null
    ville: string | null
    commune: string | null
    logo: string | null
    region: string | null
    prefecture: string | null
  }

  export type MairieCountAggregateOutputType = {
    id: number
    ville: number
    commune: number
    logo: number
    region: number
    prefecture: number
    _all: number
  }


  export type MairieAvgAggregateInputType = {
    id?: true
  }

  export type MairieSumAggregateInputType = {
    id?: true
  }

  export type MairieMinAggregateInputType = {
    id?: true
    ville?: true
    commune?: true
    logo?: true
    region?: true
    prefecture?: true
  }

  export type MairieMaxAggregateInputType = {
    id?: true
    ville?: true
    commune?: true
    logo?: true
    region?: true
    prefecture?: true
  }

  export type MairieCountAggregateInputType = {
    id?: true
    ville?: true
    commune?: true
    logo?: true
    region?: true
    prefecture?: true
    _all?: true
  }

  export type MairieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mairie to aggregate.
     */
    where?: MairieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mairies to fetch.
     */
    orderBy?: MairieOrderByWithRelationInput | MairieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MairieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mairies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mairies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mairies
    **/
    _count?: true | MairieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MairieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MairieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MairieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MairieMaxAggregateInputType
  }

  export type GetMairieAggregateType<T extends MairieAggregateArgs> = {
        [P in keyof T & keyof AggregateMairie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMairie[P]>
      : GetScalarType<T[P], AggregateMairie[P]>
  }




  export type MairieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MairieWhereInput
    orderBy?: MairieOrderByWithAggregationInput | MairieOrderByWithAggregationInput[]
    by: MairieScalarFieldEnum[] | MairieScalarFieldEnum
    having?: MairieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MairieCountAggregateInputType | true
    _avg?: MairieAvgAggregateInputType
    _sum?: MairieSumAggregateInputType
    _min?: MairieMinAggregateInputType
    _max?: MairieMaxAggregateInputType
  }

  export type MairieGroupByOutputType = {
    id: number
    ville: string
    commune: string
    logo: string
    region: string
    prefecture: string
    _count: MairieCountAggregateOutputType | null
    _avg: MairieAvgAggregateOutputType | null
    _sum: MairieSumAggregateOutputType | null
    _min: MairieMinAggregateOutputType | null
    _max: MairieMaxAggregateOutputType | null
  }

  type GetMairieGroupByPayload<T extends MairieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MairieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MairieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MairieGroupByOutputType[P]>
            : GetScalarType<T[P], MairieGroupByOutputType[P]>
        }
      >
    >


  export type MairieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ville?: boolean
    commune?: boolean
    logo?: boolean
    region?: boolean
    prefecture?: boolean
    users?: boolean | Mairie$usersArgs<ExtArgs>
    _count?: boolean | MairieCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mairie"]>

  export type MairieSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ville?: boolean
    commune?: boolean
    logo?: boolean
    region?: boolean
    prefecture?: boolean
  }, ExtArgs["result"]["mairie"]>

  export type MairieSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ville?: boolean
    commune?: boolean
    logo?: boolean
    region?: boolean
    prefecture?: boolean
  }, ExtArgs["result"]["mairie"]>

  export type MairieSelectScalar = {
    id?: boolean
    ville?: boolean
    commune?: boolean
    logo?: boolean
    region?: boolean
    prefecture?: boolean
  }

  export type MairieOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ville" | "commune" | "logo" | "region" | "prefecture", ExtArgs["result"]["mairie"]>
  export type MairieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Mairie$usersArgs<ExtArgs>
    _count?: boolean | MairieCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MairieIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MairieIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MairiePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mairie"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ville: string
      commune: string
      logo: string
      region: string
      prefecture: string
    }, ExtArgs["result"]["mairie"]>
    composites: {}
  }

  type MairieGetPayload<S extends boolean | null | undefined | MairieDefaultArgs> = $Result.GetResult<Prisma.$MairiePayload, S>

  type MairieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MairieFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MairieCountAggregateInputType | true
    }

  export interface MairieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mairie'], meta: { name: 'Mairie' } }
    /**
     * Find zero or one Mairie that matches the filter.
     * @param {MairieFindUniqueArgs} args - Arguments to find a Mairie
     * @example
     * // Get one Mairie
     * const mairie = await prisma.mairie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MairieFindUniqueArgs>(args: SelectSubset<T, MairieFindUniqueArgs<ExtArgs>>): Prisma__MairieClient<$Result.GetResult<Prisma.$MairiePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Mairie that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MairieFindUniqueOrThrowArgs} args - Arguments to find a Mairie
     * @example
     * // Get one Mairie
     * const mairie = await prisma.mairie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MairieFindUniqueOrThrowArgs>(args: SelectSubset<T, MairieFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MairieClient<$Result.GetResult<Prisma.$MairiePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mairie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MairieFindFirstArgs} args - Arguments to find a Mairie
     * @example
     * // Get one Mairie
     * const mairie = await prisma.mairie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MairieFindFirstArgs>(args?: SelectSubset<T, MairieFindFirstArgs<ExtArgs>>): Prisma__MairieClient<$Result.GetResult<Prisma.$MairiePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mairie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MairieFindFirstOrThrowArgs} args - Arguments to find a Mairie
     * @example
     * // Get one Mairie
     * const mairie = await prisma.mairie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MairieFindFirstOrThrowArgs>(args?: SelectSubset<T, MairieFindFirstOrThrowArgs<ExtArgs>>): Prisma__MairieClient<$Result.GetResult<Prisma.$MairiePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Mairies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MairieFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mairies
     * const mairies = await prisma.mairie.findMany()
     * 
     * // Get first 10 Mairies
     * const mairies = await prisma.mairie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mairieWithIdOnly = await prisma.mairie.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MairieFindManyArgs>(args?: SelectSubset<T, MairieFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MairiePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Mairie.
     * @param {MairieCreateArgs} args - Arguments to create a Mairie.
     * @example
     * // Create one Mairie
     * const Mairie = await prisma.mairie.create({
     *   data: {
     *     // ... data to create a Mairie
     *   }
     * })
     * 
     */
    create<T extends MairieCreateArgs>(args: SelectSubset<T, MairieCreateArgs<ExtArgs>>): Prisma__MairieClient<$Result.GetResult<Prisma.$MairiePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Mairies.
     * @param {MairieCreateManyArgs} args - Arguments to create many Mairies.
     * @example
     * // Create many Mairies
     * const mairie = await prisma.mairie.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MairieCreateManyArgs>(args?: SelectSubset<T, MairieCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Mairies and returns the data saved in the database.
     * @param {MairieCreateManyAndReturnArgs} args - Arguments to create many Mairies.
     * @example
     * // Create many Mairies
     * const mairie = await prisma.mairie.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Mairies and only return the `id`
     * const mairieWithIdOnly = await prisma.mairie.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MairieCreateManyAndReturnArgs>(args?: SelectSubset<T, MairieCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MairiePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Mairie.
     * @param {MairieDeleteArgs} args - Arguments to delete one Mairie.
     * @example
     * // Delete one Mairie
     * const Mairie = await prisma.mairie.delete({
     *   where: {
     *     // ... filter to delete one Mairie
     *   }
     * })
     * 
     */
    delete<T extends MairieDeleteArgs>(args: SelectSubset<T, MairieDeleteArgs<ExtArgs>>): Prisma__MairieClient<$Result.GetResult<Prisma.$MairiePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Mairie.
     * @param {MairieUpdateArgs} args - Arguments to update one Mairie.
     * @example
     * // Update one Mairie
     * const mairie = await prisma.mairie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MairieUpdateArgs>(args: SelectSubset<T, MairieUpdateArgs<ExtArgs>>): Prisma__MairieClient<$Result.GetResult<Prisma.$MairiePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Mairies.
     * @param {MairieDeleteManyArgs} args - Arguments to filter Mairies to delete.
     * @example
     * // Delete a few Mairies
     * const { count } = await prisma.mairie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MairieDeleteManyArgs>(args?: SelectSubset<T, MairieDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mairies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MairieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mairies
     * const mairie = await prisma.mairie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MairieUpdateManyArgs>(args: SelectSubset<T, MairieUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mairies and returns the data updated in the database.
     * @param {MairieUpdateManyAndReturnArgs} args - Arguments to update many Mairies.
     * @example
     * // Update many Mairies
     * const mairie = await prisma.mairie.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Mairies and only return the `id`
     * const mairieWithIdOnly = await prisma.mairie.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MairieUpdateManyAndReturnArgs>(args: SelectSubset<T, MairieUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MairiePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Mairie.
     * @param {MairieUpsertArgs} args - Arguments to update or create a Mairie.
     * @example
     * // Update or create a Mairie
     * const mairie = await prisma.mairie.upsert({
     *   create: {
     *     // ... data to create a Mairie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mairie we want to update
     *   }
     * })
     */
    upsert<T extends MairieUpsertArgs>(args: SelectSubset<T, MairieUpsertArgs<ExtArgs>>): Prisma__MairieClient<$Result.GetResult<Prisma.$MairiePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Mairies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MairieCountArgs} args - Arguments to filter Mairies to count.
     * @example
     * // Count the number of Mairies
     * const count = await prisma.mairie.count({
     *   where: {
     *     // ... the filter for the Mairies we want to count
     *   }
     * })
    **/
    count<T extends MairieCountArgs>(
      args?: Subset<T, MairieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MairieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mairie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MairieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MairieAggregateArgs>(args: Subset<T, MairieAggregateArgs>): Prisma.PrismaPromise<GetMairieAggregateType<T>>

    /**
     * Group by Mairie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MairieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MairieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MairieGroupByArgs['orderBy'] }
        : { orderBy?: MairieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MairieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMairieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mairie model
   */
  readonly fields: MairieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mairie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MairieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Mairie$usersArgs<ExtArgs> = {}>(args?: Subset<T, Mairie$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Mairie model
   */
  interface MairieFieldRefs {
    readonly id: FieldRef<"Mairie", 'Int'>
    readonly ville: FieldRef<"Mairie", 'String'>
    readonly commune: FieldRef<"Mairie", 'String'>
    readonly logo: FieldRef<"Mairie", 'String'>
    readonly region: FieldRef<"Mairie", 'String'>
    readonly prefecture: FieldRef<"Mairie", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Mairie findUnique
   */
  export type MairieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mairie
     */
    select?: MairieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mairie
     */
    omit?: MairieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MairieInclude<ExtArgs> | null
    /**
     * Filter, which Mairie to fetch.
     */
    where: MairieWhereUniqueInput
  }

  /**
   * Mairie findUniqueOrThrow
   */
  export type MairieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mairie
     */
    select?: MairieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mairie
     */
    omit?: MairieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MairieInclude<ExtArgs> | null
    /**
     * Filter, which Mairie to fetch.
     */
    where: MairieWhereUniqueInput
  }

  /**
   * Mairie findFirst
   */
  export type MairieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mairie
     */
    select?: MairieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mairie
     */
    omit?: MairieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MairieInclude<ExtArgs> | null
    /**
     * Filter, which Mairie to fetch.
     */
    where?: MairieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mairies to fetch.
     */
    orderBy?: MairieOrderByWithRelationInput | MairieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mairies.
     */
    cursor?: MairieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mairies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mairies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mairies.
     */
    distinct?: MairieScalarFieldEnum | MairieScalarFieldEnum[]
  }

  /**
   * Mairie findFirstOrThrow
   */
  export type MairieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mairie
     */
    select?: MairieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mairie
     */
    omit?: MairieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MairieInclude<ExtArgs> | null
    /**
     * Filter, which Mairie to fetch.
     */
    where?: MairieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mairies to fetch.
     */
    orderBy?: MairieOrderByWithRelationInput | MairieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mairies.
     */
    cursor?: MairieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mairies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mairies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mairies.
     */
    distinct?: MairieScalarFieldEnum | MairieScalarFieldEnum[]
  }

  /**
   * Mairie findMany
   */
  export type MairieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mairie
     */
    select?: MairieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mairie
     */
    omit?: MairieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MairieInclude<ExtArgs> | null
    /**
     * Filter, which Mairies to fetch.
     */
    where?: MairieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mairies to fetch.
     */
    orderBy?: MairieOrderByWithRelationInput | MairieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mairies.
     */
    cursor?: MairieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mairies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mairies.
     */
    skip?: number
    distinct?: MairieScalarFieldEnum | MairieScalarFieldEnum[]
  }

  /**
   * Mairie create
   */
  export type MairieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mairie
     */
    select?: MairieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mairie
     */
    omit?: MairieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MairieInclude<ExtArgs> | null
    /**
     * The data needed to create a Mairie.
     */
    data: XOR<MairieCreateInput, MairieUncheckedCreateInput>
  }

  /**
   * Mairie createMany
   */
  export type MairieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Mairies.
     */
    data: MairieCreateManyInput | MairieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mairie createManyAndReturn
   */
  export type MairieCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mairie
     */
    select?: MairieSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Mairie
     */
    omit?: MairieOmit<ExtArgs> | null
    /**
     * The data used to create many Mairies.
     */
    data: MairieCreateManyInput | MairieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mairie update
   */
  export type MairieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mairie
     */
    select?: MairieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mairie
     */
    omit?: MairieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MairieInclude<ExtArgs> | null
    /**
     * The data needed to update a Mairie.
     */
    data: XOR<MairieUpdateInput, MairieUncheckedUpdateInput>
    /**
     * Choose, which Mairie to update.
     */
    where: MairieWhereUniqueInput
  }

  /**
   * Mairie updateMany
   */
  export type MairieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Mairies.
     */
    data: XOR<MairieUpdateManyMutationInput, MairieUncheckedUpdateManyInput>
    /**
     * Filter which Mairies to update
     */
    where?: MairieWhereInput
    /**
     * Limit how many Mairies to update.
     */
    limit?: number
  }

  /**
   * Mairie updateManyAndReturn
   */
  export type MairieUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mairie
     */
    select?: MairieSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Mairie
     */
    omit?: MairieOmit<ExtArgs> | null
    /**
     * The data used to update Mairies.
     */
    data: XOR<MairieUpdateManyMutationInput, MairieUncheckedUpdateManyInput>
    /**
     * Filter which Mairies to update
     */
    where?: MairieWhereInput
    /**
     * Limit how many Mairies to update.
     */
    limit?: number
  }

  /**
   * Mairie upsert
   */
  export type MairieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mairie
     */
    select?: MairieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mairie
     */
    omit?: MairieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MairieInclude<ExtArgs> | null
    /**
     * The filter to search for the Mairie to update in case it exists.
     */
    where: MairieWhereUniqueInput
    /**
     * In case the Mairie found by the `where` argument doesn't exist, create a new Mairie with this data.
     */
    create: XOR<MairieCreateInput, MairieUncheckedCreateInput>
    /**
     * In case the Mairie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MairieUpdateInput, MairieUncheckedUpdateInput>
  }

  /**
   * Mairie delete
   */
  export type MairieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mairie
     */
    select?: MairieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mairie
     */
    omit?: MairieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MairieInclude<ExtArgs> | null
    /**
     * Filter which Mairie to delete.
     */
    where: MairieWhereUniqueInput
  }

  /**
   * Mairie deleteMany
   */
  export type MairieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mairies to delete
     */
    where?: MairieWhereInput
    /**
     * Limit how many Mairies to delete.
     */
    limit?: number
  }

  /**
   * Mairie.users
   */
  export type Mairie$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Mairie without action
   */
  export type MairieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mairie
     */
    select?: MairieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Mairie
     */
    omit?: MairieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MairieInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    mairieId: 'mairieId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PersonneScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prenom: 'prenom',
    profession: 'profession',
    adresse: 'adresse',
    telephone: 'telephone',
    dateNaissance: 'dateNaissance',
    nationalite: 'nationalite',
    numeroCni: 'numeroCni',
    sexe: 'sexe',
    lieuNaissance: 'lieuNaissance'
  };

  export type PersonneScalarFieldEnum = (typeof PersonneScalarFieldEnum)[keyof typeof PersonneScalarFieldEnum]


  export const DocumentTemplateScalarFieldEnum: {
    id: 'id',
    content: 'content',
    typeDocument: 'typeDocument'
  };

  export type DocumentTemplateScalarFieldEnum = (typeof DocumentTemplateScalarFieldEnum)[keyof typeof DocumentTemplateScalarFieldEnum]


  export const VariableScalarFieldEnum: {
    id: 'id',
    nomVariable: 'nomVariable'
  };

  export type VariableScalarFieldEnum = (typeof VariableScalarFieldEnum)[keyof typeof VariableScalarFieldEnum]


  export const DocumentTemplateVariableScalarFieldEnum: {
    id: 'id',
    documentTemplateId: 'documentTemplateId',
    variableId: 'variableId'
  };

  export type DocumentTemplateVariableScalarFieldEnum = (typeof DocumentTemplateVariableScalarFieldEnum)[keyof typeof DocumentTemplateVariableScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    date: 'date',
    identiteDuMaire: 'identiteDuMaire',
    templateId: 'templateId',
    userId: 'userId'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const DocumentPersonneScalarFieldEnum: {
    id: 'id',
    fonction: 'fonction',
    documentId: 'documentId',
    personneId: 'personneId'
  };

  export type DocumentPersonneScalarFieldEnum = (typeof DocumentPersonneScalarFieldEnum)[keyof typeof DocumentPersonneScalarFieldEnum]


  export const MairieScalarFieldEnum: {
    id: 'id',
    ville: 'ville',
    commune: 'commune',
    logo: 'logo',
    region: 'region',
    prefecture: 'prefecture'
  };

  export type MairieScalarFieldEnum = (typeof MairieScalarFieldEnum)[keyof typeof MairieScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    mairieId?: IntNullableFilter<"User"> | number | null
    personne?: XOR<PersonneScalarRelationFilter, PersonneWhereInput>
    documents?: DocumentListRelationFilter
    mairie?: XOR<MairieNullableScalarRelationFilter, MairieWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    mairieId?: SortOrderInput | SortOrder
    personne?: PersonneOrderByWithRelationInput
    documents?: DocumentOrderByRelationAggregateInput
    mairie?: MairieOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    mairieId?: IntNullableFilter<"User"> | number | null
    personne?: XOR<PersonneScalarRelationFilter, PersonneWhereInput>
    documents?: DocumentListRelationFilter
    mairie?: XOR<MairieNullableScalarRelationFilter, MairieWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    mairieId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    mairieId?: IntNullableWithAggregatesFilter<"User"> | number | null
  }

  export type PersonneWhereInput = {
    AND?: PersonneWhereInput | PersonneWhereInput[]
    OR?: PersonneWhereInput[]
    NOT?: PersonneWhereInput | PersonneWhereInput[]
    id?: IntFilter<"Personne"> | number
    nom?: StringFilter<"Personne"> | string
    prenom?: StringFilter<"Personne"> | string
    profession?: StringNullableFilter<"Personne"> | string | null
    adresse?: StringNullableFilter<"Personne"> | string | null
    telephone?: StringNullableFilter<"Personne"> | string | null
    dateNaissance?: StringNullableFilter<"Personne"> | string | null
    nationalite?: StringNullableFilter<"Personne"> | string | null
    numeroCni?: StringNullableFilter<"Personne"> | string | null
    sexe?: StringNullableFilter<"Personne"> | string | null
    lieuNaissance?: StringNullableFilter<"Personne"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    documents?: DocumentPersonneListRelationFilter
  }

  export type PersonneOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    profession?: SortOrderInput | SortOrder
    adresse?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    dateNaissance?: SortOrderInput | SortOrder
    nationalite?: SortOrderInput | SortOrder
    numeroCni?: SortOrderInput | SortOrder
    sexe?: SortOrderInput | SortOrder
    lieuNaissance?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    documents?: DocumentPersonneOrderByRelationAggregateInput
  }

  export type PersonneWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PersonneWhereInput | PersonneWhereInput[]
    OR?: PersonneWhereInput[]
    NOT?: PersonneWhereInput | PersonneWhereInput[]
    nom?: StringFilter<"Personne"> | string
    prenom?: StringFilter<"Personne"> | string
    profession?: StringNullableFilter<"Personne"> | string | null
    adresse?: StringNullableFilter<"Personne"> | string | null
    telephone?: StringNullableFilter<"Personne"> | string | null
    dateNaissance?: StringNullableFilter<"Personne"> | string | null
    nationalite?: StringNullableFilter<"Personne"> | string | null
    numeroCni?: StringNullableFilter<"Personne"> | string | null
    sexe?: StringNullableFilter<"Personne"> | string | null
    lieuNaissance?: StringNullableFilter<"Personne"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    documents?: DocumentPersonneListRelationFilter
  }, "id">

  export type PersonneOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    profession?: SortOrderInput | SortOrder
    adresse?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    dateNaissance?: SortOrderInput | SortOrder
    nationalite?: SortOrderInput | SortOrder
    numeroCni?: SortOrderInput | SortOrder
    sexe?: SortOrderInput | SortOrder
    lieuNaissance?: SortOrderInput | SortOrder
    _count?: PersonneCountOrderByAggregateInput
    _avg?: PersonneAvgOrderByAggregateInput
    _max?: PersonneMaxOrderByAggregateInput
    _min?: PersonneMinOrderByAggregateInput
    _sum?: PersonneSumOrderByAggregateInput
  }

  export type PersonneScalarWhereWithAggregatesInput = {
    AND?: PersonneScalarWhereWithAggregatesInput | PersonneScalarWhereWithAggregatesInput[]
    OR?: PersonneScalarWhereWithAggregatesInput[]
    NOT?: PersonneScalarWhereWithAggregatesInput | PersonneScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Personne"> | number
    nom?: StringWithAggregatesFilter<"Personne"> | string
    prenom?: StringWithAggregatesFilter<"Personne"> | string
    profession?: StringNullableWithAggregatesFilter<"Personne"> | string | null
    adresse?: StringNullableWithAggregatesFilter<"Personne"> | string | null
    telephone?: StringNullableWithAggregatesFilter<"Personne"> | string | null
    dateNaissance?: StringNullableWithAggregatesFilter<"Personne"> | string | null
    nationalite?: StringNullableWithAggregatesFilter<"Personne"> | string | null
    numeroCni?: StringNullableWithAggregatesFilter<"Personne"> | string | null
    sexe?: StringNullableWithAggregatesFilter<"Personne"> | string | null
    lieuNaissance?: StringNullableWithAggregatesFilter<"Personne"> | string | null
  }

  export type DocumentTemplateWhereInput = {
    AND?: DocumentTemplateWhereInput | DocumentTemplateWhereInput[]
    OR?: DocumentTemplateWhereInput[]
    NOT?: DocumentTemplateWhereInput | DocumentTemplateWhereInput[]
    id?: IntFilter<"DocumentTemplate"> | number
    content?: StringFilter<"DocumentTemplate"> | string
    typeDocument?: StringFilter<"DocumentTemplate"> | string
    documents?: DocumentListRelationFilter
    documentTemplateVariables?: DocumentTemplateVariableListRelationFilter
  }

  export type DocumentTemplateOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    typeDocument?: SortOrder
    documents?: DocumentOrderByRelationAggregateInput
    documentTemplateVariables?: DocumentTemplateVariableOrderByRelationAggregateInput
  }

  export type DocumentTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    typeDocument?: string
    AND?: DocumentTemplateWhereInput | DocumentTemplateWhereInput[]
    OR?: DocumentTemplateWhereInput[]
    NOT?: DocumentTemplateWhereInput | DocumentTemplateWhereInput[]
    content?: StringFilter<"DocumentTemplate"> | string
    documents?: DocumentListRelationFilter
    documentTemplateVariables?: DocumentTemplateVariableListRelationFilter
  }, "id" | "typeDocument">

  export type DocumentTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    typeDocument?: SortOrder
    _count?: DocumentTemplateCountOrderByAggregateInput
    _avg?: DocumentTemplateAvgOrderByAggregateInput
    _max?: DocumentTemplateMaxOrderByAggregateInput
    _min?: DocumentTemplateMinOrderByAggregateInput
    _sum?: DocumentTemplateSumOrderByAggregateInput
  }

  export type DocumentTemplateScalarWhereWithAggregatesInput = {
    AND?: DocumentTemplateScalarWhereWithAggregatesInput | DocumentTemplateScalarWhereWithAggregatesInput[]
    OR?: DocumentTemplateScalarWhereWithAggregatesInput[]
    NOT?: DocumentTemplateScalarWhereWithAggregatesInput | DocumentTemplateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DocumentTemplate"> | number
    content?: StringWithAggregatesFilter<"DocumentTemplate"> | string
    typeDocument?: StringWithAggregatesFilter<"DocumentTemplate"> | string
  }

  export type VariableWhereInput = {
    AND?: VariableWhereInput | VariableWhereInput[]
    OR?: VariableWhereInput[]
    NOT?: VariableWhereInput | VariableWhereInput[]
    id?: IntFilter<"Variable"> | number
    nomVariable?: StringFilter<"Variable"> | string
    documentTemplateVariables?: DocumentTemplateVariableListRelationFilter
  }

  export type VariableOrderByWithRelationInput = {
    id?: SortOrder
    nomVariable?: SortOrder
    documentTemplateVariables?: DocumentTemplateVariableOrderByRelationAggregateInput
  }

  export type VariableWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nomVariable?: string
    AND?: VariableWhereInput | VariableWhereInput[]
    OR?: VariableWhereInput[]
    NOT?: VariableWhereInput | VariableWhereInput[]
    documentTemplateVariables?: DocumentTemplateVariableListRelationFilter
  }, "id" | "nomVariable">

  export type VariableOrderByWithAggregationInput = {
    id?: SortOrder
    nomVariable?: SortOrder
    _count?: VariableCountOrderByAggregateInput
    _avg?: VariableAvgOrderByAggregateInput
    _max?: VariableMaxOrderByAggregateInput
    _min?: VariableMinOrderByAggregateInput
    _sum?: VariableSumOrderByAggregateInput
  }

  export type VariableScalarWhereWithAggregatesInput = {
    AND?: VariableScalarWhereWithAggregatesInput | VariableScalarWhereWithAggregatesInput[]
    OR?: VariableScalarWhereWithAggregatesInput[]
    NOT?: VariableScalarWhereWithAggregatesInput | VariableScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Variable"> | number
    nomVariable?: StringWithAggregatesFilter<"Variable"> | string
  }

  export type DocumentTemplateVariableWhereInput = {
    AND?: DocumentTemplateVariableWhereInput | DocumentTemplateVariableWhereInput[]
    OR?: DocumentTemplateVariableWhereInput[]
    NOT?: DocumentTemplateVariableWhereInput | DocumentTemplateVariableWhereInput[]
    id?: IntFilter<"DocumentTemplateVariable"> | number
    documentTemplateId?: IntFilter<"DocumentTemplateVariable"> | number
    variableId?: IntFilter<"DocumentTemplateVariable"> | number
    documentTemplate?: XOR<DocumentTemplateScalarRelationFilter, DocumentTemplateWhereInput>
    variable?: XOR<VariableScalarRelationFilter, VariableWhereInput>
  }

  export type DocumentTemplateVariableOrderByWithRelationInput = {
    id?: SortOrder
    documentTemplateId?: SortOrder
    variableId?: SortOrder
    documentTemplate?: DocumentTemplateOrderByWithRelationInput
    variable?: VariableOrderByWithRelationInput
  }

  export type DocumentTemplateVariableWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DocumentTemplateVariableWhereInput | DocumentTemplateVariableWhereInput[]
    OR?: DocumentTemplateVariableWhereInput[]
    NOT?: DocumentTemplateVariableWhereInput | DocumentTemplateVariableWhereInput[]
    documentTemplateId?: IntFilter<"DocumentTemplateVariable"> | number
    variableId?: IntFilter<"DocumentTemplateVariable"> | number
    documentTemplate?: XOR<DocumentTemplateScalarRelationFilter, DocumentTemplateWhereInput>
    variable?: XOR<VariableScalarRelationFilter, VariableWhereInput>
  }, "id">

  export type DocumentTemplateVariableOrderByWithAggregationInput = {
    id?: SortOrder
    documentTemplateId?: SortOrder
    variableId?: SortOrder
    _count?: DocumentTemplateVariableCountOrderByAggregateInput
    _avg?: DocumentTemplateVariableAvgOrderByAggregateInput
    _max?: DocumentTemplateVariableMaxOrderByAggregateInput
    _min?: DocumentTemplateVariableMinOrderByAggregateInput
    _sum?: DocumentTemplateVariableSumOrderByAggregateInput
  }

  export type DocumentTemplateVariableScalarWhereWithAggregatesInput = {
    AND?: DocumentTemplateVariableScalarWhereWithAggregatesInput | DocumentTemplateVariableScalarWhereWithAggregatesInput[]
    OR?: DocumentTemplateVariableScalarWhereWithAggregatesInput[]
    NOT?: DocumentTemplateVariableScalarWhereWithAggregatesInput | DocumentTemplateVariableScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DocumentTemplateVariable"> | number
    documentTemplateId?: IntWithAggregatesFilter<"DocumentTemplateVariable"> | number
    variableId?: IntWithAggregatesFilter<"DocumentTemplateVariable"> | number
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: IntFilter<"Document"> | number
    date?: DateTimeFilter<"Document"> | Date | string
    identiteDuMaire?: StringFilter<"Document"> | string
    templateId?: IntNullableFilter<"Document"> | number | null
    userId?: IntFilter<"Document"> | number
    template?: XOR<DocumentTemplateNullableScalarRelationFilter, DocumentTemplateWhereInput> | null
    personnes?: DocumentPersonneListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    identiteDuMaire?: SortOrder
    templateId?: SortOrderInput | SortOrder
    userId?: SortOrder
    template?: DocumentTemplateOrderByWithRelationInput
    personnes?: DocumentPersonneOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    date?: DateTimeFilter<"Document"> | Date | string
    identiteDuMaire?: StringFilter<"Document"> | string
    templateId?: IntNullableFilter<"Document"> | number | null
    userId?: IntFilter<"Document"> | number
    template?: XOR<DocumentTemplateNullableScalarRelationFilter, DocumentTemplateWhereInput> | null
    personnes?: DocumentPersonneListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    identiteDuMaire?: SortOrder
    templateId?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _avg?: DocumentAvgOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
    _sum?: DocumentSumOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Document"> | number
    date?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    identiteDuMaire?: StringWithAggregatesFilter<"Document"> | string
    templateId?: IntNullableWithAggregatesFilter<"Document"> | number | null
    userId?: IntWithAggregatesFilter<"Document"> | number
  }

  export type DocumentPersonneWhereInput = {
    AND?: DocumentPersonneWhereInput | DocumentPersonneWhereInput[]
    OR?: DocumentPersonneWhereInput[]
    NOT?: DocumentPersonneWhereInput | DocumentPersonneWhereInput[]
    id?: IntFilter<"DocumentPersonne"> | number
    fonction?: StringFilter<"DocumentPersonne"> | string
    documentId?: IntFilter<"DocumentPersonne"> | number
    personneId?: IntFilter<"DocumentPersonne"> | number
    document?: XOR<DocumentScalarRelationFilter, DocumentWhereInput>
    personne?: XOR<PersonneScalarRelationFilter, PersonneWhereInput>
  }

  export type DocumentPersonneOrderByWithRelationInput = {
    id?: SortOrder
    fonction?: SortOrder
    documentId?: SortOrder
    personneId?: SortOrder
    document?: DocumentOrderByWithRelationInput
    personne?: PersonneOrderByWithRelationInput
  }

  export type DocumentPersonneWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DocumentPersonneWhereInput | DocumentPersonneWhereInput[]
    OR?: DocumentPersonneWhereInput[]
    NOT?: DocumentPersonneWhereInput | DocumentPersonneWhereInput[]
    fonction?: StringFilter<"DocumentPersonne"> | string
    documentId?: IntFilter<"DocumentPersonne"> | number
    personneId?: IntFilter<"DocumentPersonne"> | number
    document?: XOR<DocumentScalarRelationFilter, DocumentWhereInput>
    personne?: XOR<PersonneScalarRelationFilter, PersonneWhereInput>
  }, "id">

  export type DocumentPersonneOrderByWithAggregationInput = {
    id?: SortOrder
    fonction?: SortOrder
    documentId?: SortOrder
    personneId?: SortOrder
    _count?: DocumentPersonneCountOrderByAggregateInput
    _avg?: DocumentPersonneAvgOrderByAggregateInput
    _max?: DocumentPersonneMaxOrderByAggregateInput
    _min?: DocumentPersonneMinOrderByAggregateInput
    _sum?: DocumentPersonneSumOrderByAggregateInput
  }

  export type DocumentPersonneScalarWhereWithAggregatesInput = {
    AND?: DocumentPersonneScalarWhereWithAggregatesInput | DocumentPersonneScalarWhereWithAggregatesInput[]
    OR?: DocumentPersonneScalarWhereWithAggregatesInput[]
    NOT?: DocumentPersonneScalarWhereWithAggregatesInput | DocumentPersonneScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DocumentPersonne"> | number
    fonction?: StringWithAggregatesFilter<"DocumentPersonne"> | string
    documentId?: IntWithAggregatesFilter<"DocumentPersonne"> | number
    personneId?: IntWithAggregatesFilter<"DocumentPersonne"> | number
  }

  export type MairieWhereInput = {
    AND?: MairieWhereInput | MairieWhereInput[]
    OR?: MairieWhereInput[]
    NOT?: MairieWhereInput | MairieWhereInput[]
    id?: IntFilter<"Mairie"> | number
    ville?: StringFilter<"Mairie"> | string
    commune?: StringFilter<"Mairie"> | string
    logo?: StringFilter<"Mairie"> | string
    region?: StringFilter<"Mairie"> | string
    prefecture?: StringFilter<"Mairie"> | string
    users?: UserListRelationFilter
  }

  export type MairieOrderByWithRelationInput = {
    id?: SortOrder
    ville?: SortOrder
    commune?: SortOrder
    logo?: SortOrder
    region?: SortOrder
    prefecture?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type MairieWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MairieWhereInput | MairieWhereInput[]
    OR?: MairieWhereInput[]
    NOT?: MairieWhereInput | MairieWhereInput[]
    ville?: StringFilter<"Mairie"> | string
    commune?: StringFilter<"Mairie"> | string
    logo?: StringFilter<"Mairie"> | string
    region?: StringFilter<"Mairie"> | string
    prefecture?: StringFilter<"Mairie"> | string
    users?: UserListRelationFilter
  }, "id">

  export type MairieOrderByWithAggregationInput = {
    id?: SortOrder
    ville?: SortOrder
    commune?: SortOrder
    logo?: SortOrder
    region?: SortOrder
    prefecture?: SortOrder
    _count?: MairieCountOrderByAggregateInput
    _avg?: MairieAvgOrderByAggregateInput
    _max?: MairieMaxOrderByAggregateInput
    _min?: MairieMinOrderByAggregateInput
    _sum?: MairieSumOrderByAggregateInput
  }

  export type MairieScalarWhereWithAggregatesInput = {
    AND?: MairieScalarWhereWithAggregatesInput | MairieScalarWhereWithAggregatesInput[]
    OR?: MairieScalarWhereWithAggregatesInput[]
    NOT?: MairieScalarWhereWithAggregatesInput | MairieScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Mairie"> | number
    ville?: StringWithAggregatesFilter<"Mairie"> | string
    commune?: StringWithAggregatesFilter<"Mairie"> | string
    logo?: StringWithAggregatesFilter<"Mairie"> | string
    region?: StringWithAggregatesFilter<"Mairie"> | string
    prefecture?: StringWithAggregatesFilter<"Mairie"> | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    personne?: PersonneCreateNestedOneWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
    mairie?: MairieCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    mairieId?: number | null
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    personne?: PersonneUpdateOneRequiredWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
    mairie?: MairieUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    mairieId?: NullableIntFieldUpdateOperationsInput | number | null
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    mairieId?: number | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    mairieId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PersonneCreateInput = {
    nom: string
    prenom: string
    profession?: string | null
    adresse?: string | null
    telephone?: string | null
    dateNaissance?: string | null
    nationalite?: string | null
    numeroCni?: string | null
    sexe?: string | null
    lieuNaissance?: string | null
    user?: UserCreateNestedOneWithoutPersonneInput
    documents?: DocumentPersonneCreateNestedManyWithoutPersonneInput
  }

  export type PersonneUncheckedCreateInput = {
    id?: number
    nom: string
    prenom: string
    profession?: string | null
    adresse?: string | null
    telephone?: string | null
    dateNaissance?: string | null
    nationalite?: string | null
    numeroCni?: string | null
    sexe?: string | null
    lieuNaissance?: string | null
    user?: UserUncheckedCreateNestedOneWithoutPersonneInput
    documents?: DocumentPersonneUncheckedCreateNestedManyWithoutPersonneInput
  }

  export type PersonneUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    dateNaissance?: NullableStringFieldUpdateOperationsInput | string | null
    nationalite?: NullableStringFieldUpdateOperationsInput | string | null
    numeroCni?: NullableStringFieldUpdateOperationsInput | string | null
    sexe?: NullableStringFieldUpdateOperationsInput | string | null
    lieuNaissance?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutPersonneNestedInput
    documents?: DocumentPersonneUpdateManyWithoutPersonneNestedInput
  }

  export type PersonneUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    dateNaissance?: NullableStringFieldUpdateOperationsInput | string | null
    nationalite?: NullableStringFieldUpdateOperationsInput | string | null
    numeroCni?: NullableStringFieldUpdateOperationsInput | string | null
    sexe?: NullableStringFieldUpdateOperationsInput | string | null
    lieuNaissance?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUncheckedUpdateOneWithoutPersonneNestedInput
    documents?: DocumentPersonneUncheckedUpdateManyWithoutPersonneNestedInput
  }

  export type PersonneCreateManyInput = {
    id?: number
    nom: string
    prenom: string
    profession?: string | null
    adresse?: string | null
    telephone?: string | null
    dateNaissance?: string | null
    nationalite?: string | null
    numeroCni?: string | null
    sexe?: string | null
    lieuNaissance?: string | null
  }

  export type PersonneUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    dateNaissance?: NullableStringFieldUpdateOperationsInput | string | null
    nationalite?: NullableStringFieldUpdateOperationsInput | string | null
    numeroCni?: NullableStringFieldUpdateOperationsInput | string | null
    sexe?: NullableStringFieldUpdateOperationsInput | string | null
    lieuNaissance?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonneUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    dateNaissance?: NullableStringFieldUpdateOperationsInput | string | null
    nationalite?: NullableStringFieldUpdateOperationsInput | string | null
    numeroCni?: NullableStringFieldUpdateOperationsInput | string | null
    sexe?: NullableStringFieldUpdateOperationsInput | string | null
    lieuNaissance?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentTemplateCreateInput = {
    content: string
    typeDocument: string
    documents?: DocumentCreateNestedManyWithoutTemplateInput
    documentTemplateVariables?: DocumentTemplateVariableCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateUncheckedCreateInput = {
    id?: number
    content: string
    typeDocument: string
    documents?: DocumentUncheckedCreateNestedManyWithoutTemplateInput
    documentTemplateVariables?: DocumentTemplateVariableUncheckedCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    typeDocument?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUpdateManyWithoutTemplateNestedInput
    documentTemplateVariables?: DocumentTemplateVariableUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    typeDocument?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUncheckedUpdateManyWithoutTemplateNestedInput
    documentTemplateVariables?: DocumentTemplateVariableUncheckedUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateCreateManyInput = {
    id?: number
    content: string
    typeDocument: string
  }

  export type DocumentTemplateUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    typeDocument?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentTemplateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    typeDocument?: StringFieldUpdateOperationsInput | string
  }

  export type VariableCreateInput = {
    nomVariable: string
    documentTemplateVariables?: DocumentTemplateVariableCreateNestedManyWithoutVariableInput
  }

  export type VariableUncheckedCreateInput = {
    id?: number
    nomVariable: string
    documentTemplateVariables?: DocumentTemplateVariableUncheckedCreateNestedManyWithoutVariableInput
  }

  export type VariableUpdateInput = {
    nomVariable?: StringFieldUpdateOperationsInput | string
    documentTemplateVariables?: DocumentTemplateVariableUpdateManyWithoutVariableNestedInput
  }

  export type VariableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomVariable?: StringFieldUpdateOperationsInput | string
    documentTemplateVariables?: DocumentTemplateVariableUncheckedUpdateManyWithoutVariableNestedInput
  }

  export type VariableCreateManyInput = {
    id?: number
    nomVariable: string
  }

  export type VariableUpdateManyMutationInput = {
    nomVariable?: StringFieldUpdateOperationsInput | string
  }

  export type VariableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomVariable?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentTemplateVariableCreateInput = {
    documentTemplate: DocumentTemplateCreateNestedOneWithoutDocumentTemplateVariablesInput
    variable: VariableCreateNestedOneWithoutDocumentTemplateVariablesInput
  }

  export type DocumentTemplateVariableUncheckedCreateInput = {
    id?: number
    documentTemplateId: number
    variableId: number
  }

  export type DocumentTemplateVariableUpdateInput = {
    documentTemplate?: DocumentTemplateUpdateOneRequiredWithoutDocumentTemplateVariablesNestedInput
    variable?: VariableUpdateOneRequiredWithoutDocumentTemplateVariablesNestedInput
  }

  export type DocumentTemplateVariableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentTemplateId?: IntFieldUpdateOperationsInput | number
    variableId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentTemplateVariableCreateManyInput = {
    id?: number
    documentTemplateId: number
    variableId: number
  }

  export type DocumentTemplateVariableUpdateManyMutationInput = {

  }

  export type DocumentTemplateVariableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentTemplateId?: IntFieldUpdateOperationsInput | number
    variableId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentCreateInput = {
    date: Date | string
    identiteDuMaire: string
    template?: DocumentTemplateCreateNestedOneWithoutDocumentsInput
    personnes?: DocumentPersonneCreateNestedManyWithoutDocumentInput
    user: UserCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: number
    date: Date | string
    identiteDuMaire: string
    templateId?: number | null
    userId: number
    personnes?: DocumentPersonneUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    identiteDuMaire?: StringFieldUpdateOperationsInput | string
    template?: DocumentTemplateUpdateOneWithoutDocumentsNestedInput
    personnes?: DocumentPersonneUpdateManyWithoutDocumentNestedInput
    user?: UserUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    identiteDuMaire?: StringFieldUpdateOperationsInput | string
    templateId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    personnes?: DocumentPersonneUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentCreateManyInput = {
    id?: number
    date: Date | string
    identiteDuMaire: string
    templateId?: number | null
    userId: number
  }

  export type DocumentUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    identiteDuMaire?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    identiteDuMaire?: StringFieldUpdateOperationsInput | string
    templateId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentPersonneCreateInput = {
    fonction: string
    document: DocumentCreateNestedOneWithoutPersonnesInput
    personne: PersonneCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentPersonneUncheckedCreateInput = {
    id?: number
    fonction: string
    documentId: number
    personneId: number
  }

  export type DocumentPersonneUpdateInput = {
    fonction?: StringFieldUpdateOperationsInput | string
    document?: DocumentUpdateOneRequiredWithoutPersonnesNestedInput
    personne?: PersonneUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentPersonneUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fonction?: StringFieldUpdateOperationsInput | string
    documentId?: IntFieldUpdateOperationsInput | number
    personneId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentPersonneCreateManyInput = {
    id?: number
    fonction: string
    documentId: number
    personneId: number
  }

  export type DocumentPersonneUpdateManyMutationInput = {
    fonction?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentPersonneUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fonction?: StringFieldUpdateOperationsInput | string
    documentId?: IntFieldUpdateOperationsInput | number
    personneId?: IntFieldUpdateOperationsInput | number
  }

  export type MairieCreateInput = {
    ville: string
    commune: string
    logo: string
    region: string
    prefecture: string
    users?: UserCreateNestedManyWithoutMairieInput
  }

  export type MairieUncheckedCreateInput = {
    id?: number
    ville: string
    commune: string
    logo: string
    region: string
    prefecture: string
    users?: UserUncheckedCreateNestedManyWithoutMairieInput
  }

  export type MairieUpdateInput = {
    ville?: StringFieldUpdateOperationsInput | string
    commune?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    prefecture?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutMairieNestedInput
  }

  export type MairieUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ville?: StringFieldUpdateOperationsInput | string
    commune?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    prefecture?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutMairieNestedInput
  }

  export type MairieCreateManyInput = {
    id?: number
    ville: string
    commune: string
    logo: string
    region: string
    prefecture: string
  }

  export type MairieUpdateManyMutationInput = {
    ville?: StringFieldUpdateOperationsInput | string
    commune?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    prefecture?: StringFieldUpdateOperationsInput | string
  }

  export type MairieUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ville?: StringFieldUpdateOperationsInput | string
    commune?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    prefecture?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PersonneScalarRelationFilter = {
    is?: PersonneWhereInput
    isNot?: PersonneWhereInput
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type MairieNullableScalarRelationFilter = {
    is?: MairieWhereInput | null
    isNot?: MairieWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    mairieId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    mairieId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    mairieId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    mairieId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    mairieId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type DocumentPersonneListRelationFilter = {
    every?: DocumentPersonneWhereInput
    some?: DocumentPersonneWhereInput
    none?: DocumentPersonneWhereInput
  }

  export type DocumentPersonneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PersonneCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    profession?: SortOrder
    adresse?: SortOrder
    telephone?: SortOrder
    dateNaissance?: SortOrder
    nationalite?: SortOrder
    numeroCni?: SortOrder
    sexe?: SortOrder
    lieuNaissance?: SortOrder
  }

  export type PersonneAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PersonneMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    profession?: SortOrder
    adresse?: SortOrder
    telephone?: SortOrder
    dateNaissance?: SortOrder
    nationalite?: SortOrder
    numeroCni?: SortOrder
    sexe?: SortOrder
    lieuNaissance?: SortOrder
  }

  export type PersonneMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    profession?: SortOrder
    adresse?: SortOrder
    telephone?: SortOrder
    dateNaissance?: SortOrder
    nationalite?: SortOrder
    numeroCni?: SortOrder
    sexe?: SortOrder
    lieuNaissance?: SortOrder
  }

  export type PersonneSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DocumentTemplateVariableListRelationFilter = {
    every?: DocumentTemplateVariableWhereInput
    some?: DocumentTemplateVariableWhereInput
    none?: DocumentTemplateVariableWhereInput
  }

  export type DocumentTemplateVariableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    typeDocument?: SortOrder
  }

  export type DocumentTemplateAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DocumentTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    typeDocument?: SortOrder
  }

  export type DocumentTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    typeDocument?: SortOrder
  }

  export type DocumentTemplateSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VariableCountOrderByAggregateInput = {
    id?: SortOrder
    nomVariable?: SortOrder
  }

  export type VariableAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VariableMaxOrderByAggregateInput = {
    id?: SortOrder
    nomVariable?: SortOrder
  }

  export type VariableMinOrderByAggregateInput = {
    id?: SortOrder
    nomVariable?: SortOrder
  }

  export type VariableSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DocumentTemplateScalarRelationFilter = {
    is?: DocumentTemplateWhereInput
    isNot?: DocumentTemplateWhereInput
  }

  export type VariableScalarRelationFilter = {
    is?: VariableWhereInput
    isNot?: VariableWhereInput
  }

  export type DocumentTemplateVariableCountOrderByAggregateInput = {
    id?: SortOrder
    documentTemplateId?: SortOrder
    variableId?: SortOrder
  }

  export type DocumentTemplateVariableAvgOrderByAggregateInput = {
    id?: SortOrder
    documentTemplateId?: SortOrder
    variableId?: SortOrder
  }

  export type DocumentTemplateVariableMaxOrderByAggregateInput = {
    id?: SortOrder
    documentTemplateId?: SortOrder
    variableId?: SortOrder
  }

  export type DocumentTemplateVariableMinOrderByAggregateInput = {
    id?: SortOrder
    documentTemplateId?: SortOrder
    variableId?: SortOrder
  }

  export type DocumentTemplateVariableSumOrderByAggregateInput = {
    id?: SortOrder
    documentTemplateId?: SortOrder
    variableId?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DocumentTemplateNullableScalarRelationFilter = {
    is?: DocumentTemplateWhereInput | null
    isNot?: DocumentTemplateWhereInput | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    identiteDuMaire?: SortOrder
    templateId?: SortOrder
    userId?: SortOrder
  }

  export type DocumentAvgOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    userId?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    identiteDuMaire?: SortOrder
    templateId?: SortOrder
    userId?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    identiteDuMaire?: SortOrder
    templateId?: SortOrder
    userId?: SortOrder
  }

  export type DocumentSumOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DocumentScalarRelationFilter = {
    is?: DocumentWhereInput
    isNot?: DocumentWhereInput
  }

  export type DocumentPersonneCountOrderByAggregateInput = {
    id?: SortOrder
    fonction?: SortOrder
    documentId?: SortOrder
    personneId?: SortOrder
  }

  export type DocumentPersonneAvgOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    personneId?: SortOrder
  }

  export type DocumentPersonneMaxOrderByAggregateInput = {
    id?: SortOrder
    fonction?: SortOrder
    documentId?: SortOrder
    personneId?: SortOrder
  }

  export type DocumentPersonneMinOrderByAggregateInput = {
    id?: SortOrder
    fonction?: SortOrder
    documentId?: SortOrder
    personneId?: SortOrder
  }

  export type DocumentPersonneSumOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    personneId?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MairieCountOrderByAggregateInput = {
    id?: SortOrder
    ville?: SortOrder
    commune?: SortOrder
    logo?: SortOrder
    region?: SortOrder
    prefecture?: SortOrder
  }

  export type MairieAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MairieMaxOrderByAggregateInput = {
    id?: SortOrder
    ville?: SortOrder
    commune?: SortOrder
    logo?: SortOrder
    region?: SortOrder
    prefecture?: SortOrder
  }

  export type MairieMinOrderByAggregateInput = {
    id?: SortOrder
    ville?: SortOrder
    commune?: SortOrder
    logo?: SortOrder
    region?: SortOrder
    prefecture?: SortOrder
  }

  export type MairieSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PersonneCreateNestedOneWithoutUserInput = {
    create?: XOR<PersonneCreateWithoutUserInput, PersonneUncheckedCreateWithoutUserInput>
    connectOrCreate?: PersonneCreateOrConnectWithoutUserInput
    connect?: PersonneWhereUniqueInput
  }

  export type DocumentCreateNestedManyWithoutUserInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type MairieCreateNestedOneWithoutUsersInput = {
    create?: XOR<MairieCreateWithoutUsersInput, MairieUncheckedCreateWithoutUsersInput>
    connectOrCreate?: MairieCreateOrConnectWithoutUsersInput
    connect?: MairieWhereUniqueInput
  }

  export type DocumentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PersonneUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<PersonneCreateWithoutUserInput, PersonneUncheckedCreateWithoutUserInput>
    connectOrCreate?: PersonneCreateOrConnectWithoutUserInput
    upsert?: PersonneUpsertWithoutUserInput
    connect?: PersonneWhereUniqueInput
    update?: XOR<XOR<PersonneUpdateToOneWithWhereWithoutUserInput, PersonneUpdateWithoutUserInput>, PersonneUncheckedUpdateWithoutUserInput>
  }

  export type DocumentUpdateManyWithoutUserNestedInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUserInput | DocumentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUserInput | DocumentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUserInput | DocumentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type MairieUpdateOneWithoutUsersNestedInput = {
    create?: XOR<MairieCreateWithoutUsersInput, MairieUncheckedCreateWithoutUsersInput>
    connectOrCreate?: MairieCreateOrConnectWithoutUsersInput
    upsert?: MairieUpsertWithoutUsersInput
    disconnect?: MairieWhereInput | boolean
    delete?: MairieWhereInput | boolean
    connect?: MairieWhereUniqueInput
    update?: XOR<XOR<MairieUpdateToOneWithWhereWithoutUsersInput, MairieUpdateWithoutUsersInput>, MairieUncheckedUpdateWithoutUsersInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DocumentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput> | DocumentCreateWithoutUserInput[] | DocumentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUserInput | DocumentCreateOrConnectWithoutUserInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUserInput | DocumentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DocumentCreateManyUserInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUserInput | DocumentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUserInput | DocumentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPersonneInput = {
    create?: XOR<UserCreateWithoutPersonneInput, UserUncheckedCreateWithoutPersonneInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonneInput
    connect?: UserWhereUniqueInput
  }

  export type DocumentPersonneCreateNestedManyWithoutPersonneInput = {
    create?: XOR<DocumentPersonneCreateWithoutPersonneInput, DocumentPersonneUncheckedCreateWithoutPersonneInput> | DocumentPersonneCreateWithoutPersonneInput[] | DocumentPersonneUncheckedCreateWithoutPersonneInput[]
    connectOrCreate?: DocumentPersonneCreateOrConnectWithoutPersonneInput | DocumentPersonneCreateOrConnectWithoutPersonneInput[]
    createMany?: DocumentPersonneCreateManyPersonneInputEnvelope
    connect?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedOneWithoutPersonneInput = {
    create?: XOR<UserCreateWithoutPersonneInput, UserUncheckedCreateWithoutPersonneInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonneInput
    connect?: UserWhereUniqueInput
  }

  export type DocumentPersonneUncheckedCreateNestedManyWithoutPersonneInput = {
    create?: XOR<DocumentPersonneCreateWithoutPersonneInput, DocumentPersonneUncheckedCreateWithoutPersonneInput> | DocumentPersonneCreateWithoutPersonneInput[] | DocumentPersonneUncheckedCreateWithoutPersonneInput[]
    connectOrCreate?: DocumentPersonneCreateOrConnectWithoutPersonneInput | DocumentPersonneCreateOrConnectWithoutPersonneInput[]
    createMany?: DocumentPersonneCreateManyPersonneInputEnvelope
    connect?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneWithoutPersonneNestedInput = {
    create?: XOR<UserCreateWithoutPersonneInput, UserUncheckedCreateWithoutPersonneInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonneInput
    upsert?: UserUpsertWithoutPersonneInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPersonneInput, UserUpdateWithoutPersonneInput>, UserUncheckedUpdateWithoutPersonneInput>
  }

  export type DocumentPersonneUpdateManyWithoutPersonneNestedInput = {
    create?: XOR<DocumentPersonneCreateWithoutPersonneInput, DocumentPersonneUncheckedCreateWithoutPersonneInput> | DocumentPersonneCreateWithoutPersonneInput[] | DocumentPersonneUncheckedCreateWithoutPersonneInput[]
    connectOrCreate?: DocumentPersonneCreateOrConnectWithoutPersonneInput | DocumentPersonneCreateOrConnectWithoutPersonneInput[]
    upsert?: DocumentPersonneUpsertWithWhereUniqueWithoutPersonneInput | DocumentPersonneUpsertWithWhereUniqueWithoutPersonneInput[]
    createMany?: DocumentPersonneCreateManyPersonneInputEnvelope
    set?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    disconnect?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    delete?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    connect?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    update?: DocumentPersonneUpdateWithWhereUniqueWithoutPersonneInput | DocumentPersonneUpdateWithWhereUniqueWithoutPersonneInput[]
    updateMany?: DocumentPersonneUpdateManyWithWhereWithoutPersonneInput | DocumentPersonneUpdateManyWithWhereWithoutPersonneInput[]
    deleteMany?: DocumentPersonneScalarWhereInput | DocumentPersonneScalarWhereInput[]
  }

  export type UserUncheckedUpdateOneWithoutPersonneNestedInput = {
    create?: XOR<UserCreateWithoutPersonneInput, UserUncheckedCreateWithoutPersonneInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonneInput
    upsert?: UserUpsertWithoutPersonneInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPersonneInput, UserUpdateWithoutPersonneInput>, UserUncheckedUpdateWithoutPersonneInput>
  }

  export type DocumentPersonneUncheckedUpdateManyWithoutPersonneNestedInput = {
    create?: XOR<DocumentPersonneCreateWithoutPersonneInput, DocumentPersonneUncheckedCreateWithoutPersonneInput> | DocumentPersonneCreateWithoutPersonneInput[] | DocumentPersonneUncheckedCreateWithoutPersonneInput[]
    connectOrCreate?: DocumentPersonneCreateOrConnectWithoutPersonneInput | DocumentPersonneCreateOrConnectWithoutPersonneInput[]
    upsert?: DocumentPersonneUpsertWithWhereUniqueWithoutPersonneInput | DocumentPersonneUpsertWithWhereUniqueWithoutPersonneInput[]
    createMany?: DocumentPersonneCreateManyPersonneInputEnvelope
    set?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    disconnect?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    delete?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    connect?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    update?: DocumentPersonneUpdateWithWhereUniqueWithoutPersonneInput | DocumentPersonneUpdateWithWhereUniqueWithoutPersonneInput[]
    updateMany?: DocumentPersonneUpdateManyWithWhereWithoutPersonneInput | DocumentPersonneUpdateManyWithWhereWithoutPersonneInput[]
    deleteMany?: DocumentPersonneScalarWhereInput | DocumentPersonneScalarWhereInput[]
  }

  export type DocumentCreateNestedManyWithoutTemplateInput = {
    create?: XOR<DocumentCreateWithoutTemplateInput, DocumentUncheckedCreateWithoutTemplateInput> | DocumentCreateWithoutTemplateInput[] | DocumentUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutTemplateInput | DocumentCreateOrConnectWithoutTemplateInput[]
    createMany?: DocumentCreateManyTemplateInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentTemplateVariableCreateNestedManyWithoutDocumentTemplateInput = {
    create?: XOR<DocumentTemplateVariableCreateWithoutDocumentTemplateInput, DocumentTemplateVariableUncheckedCreateWithoutDocumentTemplateInput> | DocumentTemplateVariableCreateWithoutDocumentTemplateInput[] | DocumentTemplateVariableUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: DocumentTemplateVariableCreateOrConnectWithoutDocumentTemplateInput | DocumentTemplateVariableCreateOrConnectWithoutDocumentTemplateInput[]
    createMany?: DocumentTemplateVariableCreateManyDocumentTemplateInputEnvelope
    connect?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<DocumentCreateWithoutTemplateInput, DocumentUncheckedCreateWithoutTemplateInput> | DocumentCreateWithoutTemplateInput[] | DocumentUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutTemplateInput | DocumentCreateOrConnectWithoutTemplateInput[]
    createMany?: DocumentCreateManyTemplateInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentTemplateVariableUncheckedCreateNestedManyWithoutDocumentTemplateInput = {
    create?: XOR<DocumentTemplateVariableCreateWithoutDocumentTemplateInput, DocumentTemplateVariableUncheckedCreateWithoutDocumentTemplateInput> | DocumentTemplateVariableCreateWithoutDocumentTemplateInput[] | DocumentTemplateVariableUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: DocumentTemplateVariableCreateOrConnectWithoutDocumentTemplateInput | DocumentTemplateVariableCreateOrConnectWithoutDocumentTemplateInput[]
    createMany?: DocumentTemplateVariableCreateManyDocumentTemplateInputEnvelope
    connect?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
  }

  export type DocumentUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<DocumentCreateWithoutTemplateInput, DocumentUncheckedCreateWithoutTemplateInput> | DocumentCreateWithoutTemplateInput[] | DocumentUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutTemplateInput | DocumentCreateOrConnectWithoutTemplateInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutTemplateInput | DocumentUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: DocumentCreateManyTemplateInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutTemplateInput | DocumentUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutTemplateInput | DocumentUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentTemplateVariableUpdateManyWithoutDocumentTemplateNestedInput = {
    create?: XOR<DocumentTemplateVariableCreateWithoutDocumentTemplateInput, DocumentTemplateVariableUncheckedCreateWithoutDocumentTemplateInput> | DocumentTemplateVariableCreateWithoutDocumentTemplateInput[] | DocumentTemplateVariableUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: DocumentTemplateVariableCreateOrConnectWithoutDocumentTemplateInput | DocumentTemplateVariableCreateOrConnectWithoutDocumentTemplateInput[]
    upsert?: DocumentTemplateVariableUpsertWithWhereUniqueWithoutDocumentTemplateInput | DocumentTemplateVariableUpsertWithWhereUniqueWithoutDocumentTemplateInput[]
    createMany?: DocumentTemplateVariableCreateManyDocumentTemplateInputEnvelope
    set?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    disconnect?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    delete?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    connect?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    update?: DocumentTemplateVariableUpdateWithWhereUniqueWithoutDocumentTemplateInput | DocumentTemplateVariableUpdateWithWhereUniqueWithoutDocumentTemplateInput[]
    updateMany?: DocumentTemplateVariableUpdateManyWithWhereWithoutDocumentTemplateInput | DocumentTemplateVariableUpdateManyWithWhereWithoutDocumentTemplateInput[]
    deleteMany?: DocumentTemplateVariableScalarWhereInput | DocumentTemplateVariableScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<DocumentCreateWithoutTemplateInput, DocumentUncheckedCreateWithoutTemplateInput> | DocumentCreateWithoutTemplateInput[] | DocumentUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutTemplateInput | DocumentCreateOrConnectWithoutTemplateInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutTemplateInput | DocumentUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: DocumentCreateManyTemplateInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutTemplateInput | DocumentUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutTemplateInput | DocumentUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentTemplateVariableUncheckedUpdateManyWithoutDocumentTemplateNestedInput = {
    create?: XOR<DocumentTemplateVariableCreateWithoutDocumentTemplateInput, DocumentTemplateVariableUncheckedCreateWithoutDocumentTemplateInput> | DocumentTemplateVariableCreateWithoutDocumentTemplateInput[] | DocumentTemplateVariableUncheckedCreateWithoutDocumentTemplateInput[]
    connectOrCreate?: DocumentTemplateVariableCreateOrConnectWithoutDocumentTemplateInput | DocumentTemplateVariableCreateOrConnectWithoutDocumentTemplateInput[]
    upsert?: DocumentTemplateVariableUpsertWithWhereUniqueWithoutDocumentTemplateInput | DocumentTemplateVariableUpsertWithWhereUniqueWithoutDocumentTemplateInput[]
    createMany?: DocumentTemplateVariableCreateManyDocumentTemplateInputEnvelope
    set?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    disconnect?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    delete?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    connect?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    update?: DocumentTemplateVariableUpdateWithWhereUniqueWithoutDocumentTemplateInput | DocumentTemplateVariableUpdateWithWhereUniqueWithoutDocumentTemplateInput[]
    updateMany?: DocumentTemplateVariableUpdateManyWithWhereWithoutDocumentTemplateInput | DocumentTemplateVariableUpdateManyWithWhereWithoutDocumentTemplateInput[]
    deleteMany?: DocumentTemplateVariableScalarWhereInput | DocumentTemplateVariableScalarWhereInput[]
  }

  export type DocumentTemplateVariableCreateNestedManyWithoutVariableInput = {
    create?: XOR<DocumentTemplateVariableCreateWithoutVariableInput, DocumentTemplateVariableUncheckedCreateWithoutVariableInput> | DocumentTemplateVariableCreateWithoutVariableInput[] | DocumentTemplateVariableUncheckedCreateWithoutVariableInput[]
    connectOrCreate?: DocumentTemplateVariableCreateOrConnectWithoutVariableInput | DocumentTemplateVariableCreateOrConnectWithoutVariableInput[]
    createMany?: DocumentTemplateVariableCreateManyVariableInputEnvelope
    connect?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
  }

  export type DocumentTemplateVariableUncheckedCreateNestedManyWithoutVariableInput = {
    create?: XOR<DocumentTemplateVariableCreateWithoutVariableInput, DocumentTemplateVariableUncheckedCreateWithoutVariableInput> | DocumentTemplateVariableCreateWithoutVariableInput[] | DocumentTemplateVariableUncheckedCreateWithoutVariableInput[]
    connectOrCreate?: DocumentTemplateVariableCreateOrConnectWithoutVariableInput | DocumentTemplateVariableCreateOrConnectWithoutVariableInput[]
    createMany?: DocumentTemplateVariableCreateManyVariableInputEnvelope
    connect?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
  }

  export type DocumentTemplateVariableUpdateManyWithoutVariableNestedInput = {
    create?: XOR<DocumentTemplateVariableCreateWithoutVariableInput, DocumentTemplateVariableUncheckedCreateWithoutVariableInput> | DocumentTemplateVariableCreateWithoutVariableInput[] | DocumentTemplateVariableUncheckedCreateWithoutVariableInput[]
    connectOrCreate?: DocumentTemplateVariableCreateOrConnectWithoutVariableInput | DocumentTemplateVariableCreateOrConnectWithoutVariableInput[]
    upsert?: DocumentTemplateVariableUpsertWithWhereUniqueWithoutVariableInput | DocumentTemplateVariableUpsertWithWhereUniqueWithoutVariableInput[]
    createMany?: DocumentTemplateVariableCreateManyVariableInputEnvelope
    set?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    disconnect?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    delete?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    connect?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    update?: DocumentTemplateVariableUpdateWithWhereUniqueWithoutVariableInput | DocumentTemplateVariableUpdateWithWhereUniqueWithoutVariableInput[]
    updateMany?: DocumentTemplateVariableUpdateManyWithWhereWithoutVariableInput | DocumentTemplateVariableUpdateManyWithWhereWithoutVariableInput[]
    deleteMany?: DocumentTemplateVariableScalarWhereInput | DocumentTemplateVariableScalarWhereInput[]
  }

  export type DocumentTemplateVariableUncheckedUpdateManyWithoutVariableNestedInput = {
    create?: XOR<DocumentTemplateVariableCreateWithoutVariableInput, DocumentTemplateVariableUncheckedCreateWithoutVariableInput> | DocumentTemplateVariableCreateWithoutVariableInput[] | DocumentTemplateVariableUncheckedCreateWithoutVariableInput[]
    connectOrCreate?: DocumentTemplateVariableCreateOrConnectWithoutVariableInput | DocumentTemplateVariableCreateOrConnectWithoutVariableInput[]
    upsert?: DocumentTemplateVariableUpsertWithWhereUniqueWithoutVariableInput | DocumentTemplateVariableUpsertWithWhereUniqueWithoutVariableInput[]
    createMany?: DocumentTemplateVariableCreateManyVariableInputEnvelope
    set?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    disconnect?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    delete?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    connect?: DocumentTemplateVariableWhereUniqueInput | DocumentTemplateVariableWhereUniqueInput[]
    update?: DocumentTemplateVariableUpdateWithWhereUniqueWithoutVariableInput | DocumentTemplateVariableUpdateWithWhereUniqueWithoutVariableInput[]
    updateMany?: DocumentTemplateVariableUpdateManyWithWhereWithoutVariableInput | DocumentTemplateVariableUpdateManyWithWhereWithoutVariableInput[]
    deleteMany?: DocumentTemplateVariableScalarWhereInput | DocumentTemplateVariableScalarWhereInput[]
  }

  export type DocumentTemplateCreateNestedOneWithoutDocumentTemplateVariablesInput = {
    create?: XOR<DocumentTemplateCreateWithoutDocumentTemplateVariablesInput, DocumentTemplateUncheckedCreateWithoutDocumentTemplateVariablesInput>
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutDocumentTemplateVariablesInput
    connect?: DocumentTemplateWhereUniqueInput
  }

  export type VariableCreateNestedOneWithoutDocumentTemplateVariablesInput = {
    create?: XOR<VariableCreateWithoutDocumentTemplateVariablesInput, VariableUncheckedCreateWithoutDocumentTemplateVariablesInput>
    connectOrCreate?: VariableCreateOrConnectWithoutDocumentTemplateVariablesInput
    connect?: VariableWhereUniqueInput
  }

  export type DocumentTemplateUpdateOneRequiredWithoutDocumentTemplateVariablesNestedInput = {
    create?: XOR<DocumentTemplateCreateWithoutDocumentTemplateVariablesInput, DocumentTemplateUncheckedCreateWithoutDocumentTemplateVariablesInput>
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutDocumentTemplateVariablesInput
    upsert?: DocumentTemplateUpsertWithoutDocumentTemplateVariablesInput
    connect?: DocumentTemplateWhereUniqueInput
    update?: XOR<XOR<DocumentTemplateUpdateToOneWithWhereWithoutDocumentTemplateVariablesInput, DocumentTemplateUpdateWithoutDocumentTemplateVariablesInput>, DocumentTemplateUncheckedUpdateWithoutDocumentTemplateVariablesInput>
  }

  export type VariableUpdateOneRequiredWithoutDocumentTemplateVariablesNestedInput = {
    create?: XOR<VariableCreateWithoutDocumentTemplateVariablesInput, VariableUncheckedCreateWithoutDocumentTemplateVariablesInput>
    connectOrCreate?: VariableCreateOrConnectWithoutDocumentTemplateVariablesInput
    upsert?: VariableUpsertWithoutDocumentTemplateVariablesInput
    connect?: VariableWhereUniqueInput
    update?: XOR<XOR<VariableUpdateToOneWithWhereWithoutDocumentTemplateVariablesInput, VariableUpdateWithoutDocumentTemplateVariablesInput>, VariableUncheckedUpdateWithoutDocumentTemplateVariablesInput>
  }

  export type DocumentTemplateCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<DocumentTemplateCreateWithoutDocumentsInput, DocumentTemplateUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutDocumentsInput
    connect?: DocumentTemplateWhereUniqueInput
  }

  export type DocumentPersonneCreateNestedManyWithoutDocumentInput = {
    create?: XOR<DocumentPersonneCreateWithoutDocumentInput, DocumentPersonneUncheckedCreateWithoutDocumentInput> | DocumentPersonneCreateWithoutDocumentInput[] | DocumentPersonneUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentPersonneCreateOrConnectWithoutDocumentInput | DocumentPersonneCreateOrConnectWithoutDocumentInput[]
    createMany?: DocumentPersonneCreateManyDocumentInputEnvelope
    connect?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    connect?: UserWhereUniqueInput
  }

  export type DocumentPersonneUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<DocumentPersonneCreateWithoutDocumentInput, DocumentPersonneUncheckedCreateWithoutDocumentInput> | DocumentPersonneCreateWithoutDocumentInput[] | DocumentPersonneUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentPersonneCreateOrConnectWithoutDocumentInput | DocumentPersonneCreateOrConnectWithoutDocumentInput[]
    createMany?: DocumentPersonneCreateManyDocumentInputEnvelope
    connect?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DocumentTemplateUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<DocumentTemplateCreateWithoutDocumentsInput, DocumentTemplateUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: DocumentTemplateCreateOrConnectWithoutDocumentsInput
    upsert?: DocumentTemplateUpsertWithoutDocumentsInput
    disconnect?: DocumentTemplateWhereInput | boolean
    delete?: DocumentTemplateWhereInput | boolean
    connect?: DocumentTemplateWhereUniqueInput
    update?: XOR<XOR<DocumentTemplateUpdateToOneWithWhereWithoutDocumentsInput, DocumentTemplateUpdateWithoutDocumentsInput>, DocumentTemplateUncheckedUpdateWithoutDocumentsInput>
  }

  export type DocumentPersonneUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<DocumentPersonneCreateWithoutDocumentInput, DocumentPersonneUncheckedCreateWithoutDocumentInput> | DocumentPersonneCreateWithoutDocumentInput[] | DocumentPersonneUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentPersonneCreateOrConnectWithoutDocumentInput | DocumentPersonneCreateOrConnectWithoutDocumentInput[]
    upsert?: DocumentPersonneUpsertWithWhereUniqueWithoutDocumentInput | DocumentPersonneUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: DocumentPersonneCreateManyDocumentInputEnvelope
    set?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    disconnect?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    delete?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    connect?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    update?: DocumentPersonneUpdateWithWhereUniqueWithoutDocumentInput | DocumentPersonneUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: DocumentPersonneUpdateManyWithWhereWithoutDocumentInput | DocumentPersonneUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: DocumentPersonneScalarWhereInput | DocumentPersonneScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    upsert?: UserUpsertWithoutDocumentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDocumentsInput, UserUpdateWithoutDocumentsInput>, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type DocumentPersonneUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<DocumentPersonneCreateWithoutDocumentInput, DocumentPersonneUncheckedCreateWithoutDocumentInput> | DocumentPersonneCreateWithoutDocumentInput[] | DocumentPersonneUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: DocumentPersonneCreateOrConnectWithoutDocumentInput | DocumentPersonneCreateOrConnectWithoutDocumentInput[]
    upsert?: DocumentPersonneUpsertWithWhereUniqueWithoutDocumentInput | DocumentPersonneUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: DocumentPersonneCreateManyDocumentInputEnvelope
    set?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    disconnect?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    delete?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    connect?: DocumentPersonneWhereUniqueInput | DocumentPersonneWhereUniqueInput[]
    update?: DocumentPersonneUpdateWithWhereUniqueWithoutDocumentInput | DocumentPersonneUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: DocumentPersonneUpdateManyWithWhereWithoutDocumentInput | DocumentPersonneUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: DocumentPersonneScalarWhereInput | DocumentPersonneScalarWhereInput[]
  }

  export type DocumentCreateNestedOneWithoutPersonnesInput = {
    create?: XOR<DocumentCreateWithoutPersonnesInput, DocumentUncheckedCreateWithoutPersonnesInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutPersonnesInput
    connect?: DocumentWhereUniqueInput
  }

  export type PersonneCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<PersonneCreateWithoutDocumentsInput, PersonneUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: PersonneCreateOrConnectWithoutDocumentsInput
    connect?: PersonneWhereUniqueInput
  }

  export type DocumentUpdateOneRequiredWithoutPersonnesNestedInput = {
    create?: XOR<DocumentCreateWithoutPersonnesInput, DocumentUncheckedCreateWithoutPersonnesInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutPersonnesInput
    upsert?: DocumentUpsertWithoutPersonnesInput
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutPersonnesInput, DocumentUpdateWithoutPersonnesInput>, DocumentUncheckedUpdateWithoutPersonnesInput>
  }

  export type PersonneUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<PersonneCreateWithoutDocumentsInput, PersonneUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: PersonneCreateOrConnectWithoutDocumentsInput
    upsert?: PersonneUpsertWithoutDocumentsInput
    connect?: PersonneWhereUniqueInput
    update?: XOR<XOR<PersonneUpdateToOneWithWhereWithoutDocumentsInput, PersonneUpdateWithoutDocumentsInput>, PersonneUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserCreateNestedManyWithoutMairieInput = {
    create?: XOR<UserCreateWithoutMairieInput, UserUncheckedCreateWithoutMairieInput> | UserCreateWithoutMairieInput[] | UserUncheckedCreateWithoutMairieInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMairieInput | UserCreateOrConnectWithoutMairieInput[]
    createMany?: UserCreateManyMairieInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutMairieInput = {
    create?: XOR<UserCreateWithoutMairieInput, UserUncheckedCreateWithoutMairieInput> | UserCreateWithoutMairieInput[] | UserUncheckedCreateWithoutMairieInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMairieInput | UserCreateOrConnectWithoutMairieInput[]
    createMany?: UserCreateManyMairieInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutMairieNestedInput = {
    create?: XOR<UserCreateWithoutMairieInput, UserUncheckedCreateWithoutMairieInput> | UserCreateWithoutMairieInput[] | UserUncheckedCreateWithoutMairieInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMairieInput | UserCreateOrConnectWithoutMairieInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutMairieInput | UserUpsertWithWhereUniqueWithoutMairieInput[]
    createMany?: UserCreateManyMairieInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutMairieInput | UserUpdateWithWhereUniqueWithoutMairieInput[]
    updateMany?: UserUpdateManyWithWhereWithoutMairieInput | UserUpdateManyWithWhereWithoutMairieInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutMairieNestedInput = {
    create?: XOR<UserCreateWithoutMairieInput, UserUncheckedCreateWithoutMairieInput> | UserCreateWithoutMairieInput[] | UserUncheckedCreateWithoutMairieInput[]
    connectOrCreate?: UserCreateOrConnectWithoutMairieInput | UserCreateOrConnectWithoutMairieInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutMairieInput | UserUpsertWithWhereUniqueWithoutMairieInput[]
    createMany?: UserCreateManyMairieInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutMairieInput | UserUpdateWithWhereUniqueWithoutMairieInput[]
    updateMany?: UserUpdateManyWithWhereWithoutMairieInput | UserUpdateManyWithWhereWithoutMairieInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PersonneCreateWithoutUserInput = {
    nom: string
    prenom: string
    profession?: string | null
    adresse?: string | null
    telephone?: string | null
    dateNaissance?: string | null
    nationalite?: string | null
    numeroCni?: string | null
    sexe?: string | null
    lieuNaissance?: string | null
    documents?: DocumentPersonneCreateNestedManyWithoutPersonneInput
  }

  export type PersonneUncheckedCreateWithoutUserInput = {
    id?: number
    nom: string
    prenom: string
    profession?: string | null
    adresse?: string | null
    telephone?: string | null
    dateNaissance?: string | null
    nationalite?: string | null
    numeroCni?: string | null
    sexe?: string | null
    lieuNaissance?: string | null
    documents?: DocumentPersonneUncheckedCreateNestedManyWithoutPersonneInput
  }

  export type PersonneCreateOrConnectWithoutUserInput = {
    where: PersonneWhereUniqueInput
    create: XOR<PersonneCreateWithoutUserInput, PersonneUncheckedCreateWithoutUserInput>
  }

  export type DocumentCreateWithoutUserInput = {
    date: Date | string
    identiteDuMaire: string
    template?: DocumentTemplateCreateNestedOneWithoutDocumentsInput
    personnes?: DocumentPersonneCreateNestedManyWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutUserInput = {
    id?: number
    date: Date | string
    identiteDuMaire: string
    templateId?: number | null
    personnes?: DocumentPersonneUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutUserInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput>
  }

  export type DocumentCreateManyUserInputEnvelope = {
    data: DocumentCreateManyUserInput | DocumentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MairieCreateWithoutUsersInput = {
    ville: string
    commune: string
    logo: string
    region: string
    prefecture: string
  }

  export type MairieUncheckedCreateWithoutUsersInput = {
    id?: number
    ville: string
    commune: string
    logo: string
    region: string
    prefecture: string
  }

  export type MairieCreateOrConnectWithoutUsersInput = {
    where: MairieWhereUniqueInput
    create: XOR<MairieCreateWithoutUsersInput, MairieUncheckedCreateWithoutUsersInput>
  }

  export type PersonneUpsertWithoutUserInput = {
    update: XOR<PersonneUpdateWithoutUserInput, PersonneUncheckedUpdateWithoutUserInput>
    create: XOR<PersonneCreateWithoutUserInput, PersonneUncheckedCreateWithoutUserInput>
    where?: PersonneWhereInput
  }

  export type PersonneUpdateToOneWithWhereWithoutUserInput = {
    where?: PersonneWhereInput
    data: XOR<PersonneUpdateWithoutUserInput, PersonneUncheckedUpdateWithoutUserInput>
  }

  export type PersonneUpdateWithoutUserInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    dateNaissance?: NullableStringFieldUpdateOperationsInput | string | null
    nationalite?: NullableStringFieldUpdateOperationsInput | string | null
    numeroCni?: NullableStringFieldUpdateOperationsInput | string | null
    sexe?: NullableStringFieldUpdateOperationsInput | string | null
    lieuNaissance?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: DocumentPersonneUpdateManyWithoutPersonneNestedInput
  }

  export type PersonneUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    dateNaissance?: NullableStringFieldUpdateOperationsInput | string | null
    nationalite?: NullableStringFieldUpdateOperationsInput | string | null
    numeroCni?: NullableStringFieldUpdateOperationsInput | string | null
    sexe?: NullableStringFieldUpdateOperationsInput | string | null
    lieuNaissance?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: DocumentPersonneUncheckedUpdateManyWithoutPersonneNestedInput
  }

  export type DocumentUpsertWithWhereUniqueWithoutUserInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutUserInput, DocumentUncheckedUpdateWithoutUserInput>
    create: XOR<DocumentCreateWithoutUserInput, DocumentUncheckedCreateWithoutUserInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutUserInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutUserInput, DocumentUncheckedUpdateWithoutUserInput>
  }

  export type DocumentUpdateManyWithWhereWithoutUserInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutUserInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: IntFilter<"Document"> | number
    date?: DateTimeFilter<"Document"> | Date | string
    identiteDuMaire?: StringFilter<"Document"> | string
    templateId?: IntNullableFilter<"Document"> | number | null
    userId?: IntFilter<"Document"> | number
  }

  export type MairieUpsertWithoutUsersInput = {
    update: XOR<MairieUpdateWithoutUsersInput, MairieUncheckedUpdateWithoutUsersInput>
    create: XOR<MairieCreateWithoutUsersInput, MairieUncheckedCreateWithoutUsersInput>
    where?: MairieWhereInput
  }

  export type MairieUpdateToOneWithWhereWithoutUsersInput = {
    where?: MairieWhereInput
    data: XOR<MairieUpdateWithoutUsersInput, MairieUncheckedUpdateWithoutUsersInput>
  }

  export type MairieUpdateWithoutUsersInput = {
    ville?: StringFieldUpdateOperationsInput | string
    commune?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    prefecture?: StringFieldUpdateOperationsInput | string
  }

  export type MairieUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    ville?: StringFieldUpdateOperationsInput | string
    commune?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    prefecture?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutPersonneInput = {
    email: string
    password: string
    documents?: DocumentCreateNestedManyWithoutUserInput
    mairie?: MairieCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutPersonneInput = {
    email: string
    password: string
    mairieId?: number | null
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPersonneInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPersonneInput, UserUncheckedCreateWithoutPersonneInput>
  }

  export type DocumentPersonneCreateWithoutPersonneInput = {
    fonction: string
    document: DocumentCreateNestedOneWithoutPersonnesInput
  }

  export type DocumentPersonneUncheckedCreateWithoutPersonneInput = {
    id?: number
    fonction: string
    documentId: number
  }

  export type DocumentPersonneCreateOrConnectWithoutPersonneInput = {
    where: DocumentPersonneWhereUniqueInput
    create: XOR<DocumentPersonneCreateWithoutPersonneInput, DocumentPersonneUncheckedCreateWithoutPersonneInput>
  }

  export type DocumentPersonneCreateManyPersonneInputEnvelope = {
    data: DocumentPersonneCreateManyPersonneInput | DocumentPersonneCreateManyPersonneInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPersonneInput = {
    update: XOR<UserUpdateWithoutPersonneInput, UserUncheckedUpdateWithoutPersonneInput>
    create: XOR<UserCreateWithoutPersonneInput, UserUncheckedCreateWithoutPersonneInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPersonneInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPersonneInput, UserUncheckedUpdateWithoutPersonneInput>
  }

  export type UserUpdateWithoutPersonneInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUpdateManyWithoutUserNestedInput
    mairie?: MairieUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutPersonneInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    mairieId?: NullableIntFieldUpdateOperationsInput | number | null
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DocumentPersonneUpsertWithWhereUniqueWithoutPersonneInput = {
    where: DocumentPersonneWhereUniqueInput
    update: XOR<DocumentPersonneUpdateWithoutPersonneInput, DocumentPersonneUncheckedUpdateWithoutPersonneInput>
    create: XOR<DocumentPersonneCreateWithoutPersonneInput, DocumentPersonneUncheckedCreateWithoutPersonneInput>
  }

  export type DocumentPersonneUpdateWithWhereUniqueWithoutPersonneInput = {
    where: DocumentPersonneWhereUniqueInput
    data: XOR<DocumentPersonneUpdateWithoutPersonneInput, DocumentPersonneUncheckedUpdateWithoutPersonneInput>
  }

  export type DocumentPersonneUpdateManyWithWhereWithoutPersonneInput = {
    where: DocumentPersonneScalarWhereInput
    data: XOR<DocumentPersonneUpdateManyMutationInput, DocumentPersonneUncheckedUpdateManyWithoutPersonneInput>
  }

  export type DocumentPersonneScalarWhereInput = {
    AND?: DocumentPersonneScalarWhereInput | DocumentPersonneScalarWhereInput[]
    OR?: DocumentPersonneScalarWhereInput[]
    NOT?: DocumentPersonneScalarWhereInput | DocumentPersonneScalarWhereInput[]
    id?: IntFilter<"DocumentPersonne"> | number
    fonction?: StringFilter<"DocumentPersonne"> | string
    documentId?: IntFilter<"DocumentPersonne"> | number
    personneId?: IntFilter<"DocumentPersonne"> | number
  }

  export type DocumentCreateWithoutTemplateInput = {
    date: Date | string
    identiteDuMaire: string
    personnes?: DocumentPersonneCreateNestedManyWithoutDocumentInput
    user: UserCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutTemplateInput = {
    id?: number
    date: Date | string
    identiteDuMaire: string
    userId: number
    personnes?: DocumentPersonneUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type DocumentCreateOrConnectWithoutTemplateInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutTemplateInput, DocumentUncheckedCreateWithoutTemplateInput>
  }

  export type DocumentCreateManyTemplateInputEnvelope = {
    data: DocumentCreateManyTemplateInput | DocumentCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type DocumentTemplateVariableCreateWithoutDocumentTemplateInput = {
    variable: VariableCreateNestedOneWithoutDocumentTemplateVariablesInput
  }

  export type DocumentTemplateVariableUncheckedCreateWithoutDocumentTemplateInput = {
    id?: number
    variableId: number
  }

  export type DocumentTemplateVariableCreateOrConnectWithoutDocumentTemplateInput = {
    where: DocumentTemplateVariableWhereUniqueInput
    create: XOR<DocumentTemplateVariableCreateWithoutDocumentTemplateInput, DocumentTemplateVariableUncheckedCreateWithoutDocumentTemplateInput>
  }

  export type DocumentTemplateVariableCreateManyDocumentTemplateInputEnvelope = {
    data: DocumentTemplateVariableCreateManyDocumentTemplateInput | DocumentTemplateVariableCreateManyDocumentTemplateInput[]
    skipDuplicates?: boolean
  }

  export type DocumentUpsertWithWhereUniqueWithoutTemplateInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutTemplateInput, DocumentUncheckedUpdateWithoutTemplateInput>
    create: XOR<DocumentCreateWithoutTemplateInput, DocumentUncheckedCreateWithoutTemplateInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutTemplateInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutTemplateInput, DocumentUncheckedUpdateWithoutTemplateInput>
  }

  export type DocumentUpdateManyWithWhereWithoutTemplateInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutTemplateInput>
  }

  export type DocumentTemplateVariableUpsertWithWhereUniqueWithoutDocumentTemplateInput = {
    where: DocumentTemplateVariableWhereUniqueInput
    update: XOR<DocumentTemplateVariableUpdateWithoutDocumentTemplateInput, DocumentTemplateVariableUncheckedUpdateWithoutDocumentTemplateInput>
    create: XOR<DocumentTemplateVariableCreateWithoutDocumentTemplateInput, DocumentTemplateVariableUncheckedCreateWithoutDocumentTemplateInput>
  }

  export type DocumentTemplateVariableUpdateWithWhereUniqueWithoutDocumentTemplateInput = {
    where: DocumentTemplateVariableWhereUniqueInput
    data: XOR<DocumentTemplateVariableUpdateWithoutDocumentTemplateInput, DocumentTemplateVariableUncheckedUpdateWithoutDocumentTemplateInput>
  }

  export type DocumentTemplateVariableUpdateManyWithWhereWithoutDocumentTemplateInput = {
    where: DocumentTemplateVariableScalarWhereInput
    data: XOR<DocumentTemplateVariableUpdateManyMutationInput, DocumentTemplateVariableUncheckedUpdateManyWithoutDocumentTemplateInput>
  }

  export type DocumentTemplateVariableScalarWhereInput = {
    AND?: DocumentTemplateVariableScalarWhereInput | DocumentTemplateVariableScalarWhereInput[]
    OR?: DocumentTemplateVariableScalarWhereInput[]
    NOT?: DocumentTemplateVariableScalarWhereInput | DocumentTemplateVariableScalarWhereInput[]
    id?: IntFilter<"DocumentTemplateVariable"> | number
    documentTemplateId?: IntFilter<"DocumentTemplateVariable"> | number
    variableId?: IntFilter<"DocumentTemplateVariable"> | number
  }

  export type DocumentTemplateVariableCreateWithoutVariableInput = {
    documentTemplate: DocumentTemplateCreateNestedOneWithoutDocumentTemplateVariablesInput
  }

  export type DocumentTemplateVariableUncheckedCreateWithoutVariableInput = {
    id?: number
    documentTemplateId: number
  }

  export type DocumentTemplateVariableCreateOrConnectWithoutVariableInput = {
    where: DocumentTemplateVariableWhereUniqueInput
    create: XOR<DocumentTemplateVariableCreateWithoutVariableInput, DocumentTemplateVariableUncheckedCreateWithoutVariableInput>
  }

  export type DocumentTemplateVariableCreateManyVariableInputEnvelope = {
    data: DocumentTemplateVariableCreateManyVariableInput | DocumentTemplateVariableCreateManyVariableInput[]
    skipDuplicates?: boolean
  }

  export type DocumentTemplateVariableUpsertWithWhereUniqueWithoutVariableInput = {
    where: DocumentTemplateVariableWhereUniqueInput
    update: XOR<DocumentTemplateVariableUpdateWithoutVariableInput, DocumentTemplateVariableUncheckedUpdateWithoutVariableInput>
    create: XOR<DocumentTemplateVariableCreateWithoutVariableInput, DocumentTemplateVariableUncheckedCreateWithoutVariableInput>
  }

  export type DocumentTemplateVariableUpdateWithWhereUniqueWithoutVariableInput = {
    where: DocumentTemplateVariableWhereUniqueInput
    data: XOR<DocumentTemplateVariableUpdateWithoutVariableInput, DocumentTemplateVariableUncheckedUpdateWithoutVariableInput>
  }

  export type DocumentTemplateVariableUpdateManyWithWhereWithoutVariableInput = {
    where: DocumentTemplateVariableScalarWhereInput
    data: XOR<DocumentTemplateVariableUpdateManyMutationInput, DocumentTemplateVariableUncheckedUpdateManyWithoutVariableInput>
  }

  export type DocumentTemplateCreateWithoutDocumentTemplateVariablesInput = {
    content: string
    typeDocument: string
    documents?: DocumentCreateNestedManyWithoutTemplateInput
  }

  export type DocumentTemplateUncheckedCreateWithoutDocumentTemplateVariablesInput = {
    id?: number
    content: string
    typeDocument: string
    documents?: DocumentUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type DocumentTemplateCreateOrConnectWithoutDocumentTemplateVariablesInput = {
    where: DocumentTemplateWhereUniqueInput
    create: XOR<DocumentTemplateCreateWithoutDocumentTemplateVariablesInput, DocumentTemplateUncheckedCreateWithoutDocumentTemplateVariablesInput>
  }

  export type VariableCreateWithoutDocumentTemplateVariablesInput = {
    nomVariable: string
  }

  export type VariableUncheckedCreateWithoutDocumentTemplateVariablesInput = {
    id?: number
    nomVariable: string
  }

  export type VariableCreateOrConnectWithoutDocumentTemplateVariablesInput = {
    where: VariableWhereUniqueInput
    create: XOR<VariableCreateWithoutDocumentTemplateVariablesInput, VariableUncheckedCreateWithoutDocumentTemplateVariablesInput>
  }

  export type DocumentTemplateUpsertWithoutDocumentTemplateVariablesInput = {
    update: XOR<DocumentTemplateUpdateWithoutDocumentTemplateVariablesInput, DocumentTemplateUncheckedUpdateWithoutDocumentTemplateVariablesInput>
    create: XOR<DocumentTemplateCreateWithoutDocumentTemplateVariablesInput, DocumentTemplateUncheckedCreateWithoutDocumentTemplateVariablesInput>
    where?: DocumentTemplateWhereInput
  }

  export type DocumentTemplateUpdateToOneWithWhereWithoutDocumentTemplateVariablesInput = {
    where?: DocumentTemplateWhereInput
    data: XOR<DocumentTemplateUpdateWithoutDocumentTemplateVariablesInput, DocumentTemplateUncheckedUpdateWithoutDocumentTemplateVariablesInput>
  }

  export type DocumentTemplateUpdateWithoutDocumentTemplateVariablesInput = {
    content?: StringFieldUpdateOperationsInput | string
    typeDocument?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUpdateManyWithoutTemplateNestedInput
  }

  export type DocumentTemplateUncheckedUpdateWithoutDocumentTemplateVariablesInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    typeDocument?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type VariableUpsertWithoutDocumentTemplateVariablesInput = {
    update: XOR<VariableUpdateWithoutDocumentTemplateVariablesInput, VariableUncheckedUpdateWithoutDocumentTemplateVariablesInput>
    create: XOR<VariableCreateWithoutDocumentTemplateVariablesInput, VariableUncheckedCreateWithoutDocumentTemplateVariablesInput>
    where?: VariableWhereInput
  }

  export type VariableUpdateToOneWithWhereWithoutDocumentTemplateVariablesInput = {
    where?: VariableWhereInput
    data: XOR<VariableUpdateWithoutDocumentTemplateVariablesInput, VariableUncheckedUpdateWithoutDocumentTemplateVariablesInput>
  }

  export type VariableUpdateWithoutDocumentTemplateVariablesInput = {
    nomVariable?: StringFieldUpdateOperationsInput | string
  }

  export type VariableUncheckedUpdateWithoutDocumentTemplateVariablesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomVariable?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentTemplateCreateWithoutDocumentsInput = {
    content: string
    typeDocument: string
    documentTemplateVariables?: DocumentTemplateVariableCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateUncheckedCreateWithoutDocumentsInput = {
    id?: number
    content: string
    typeDocument: string
    documentTemplateVariables?: DocumentTemplateVariableUncheckedCreateNestedManyWithoutDocumentTemplateInput
  }

  export type DocumentTemplateCreateOrConnectWithoutDocumentsInput = {
    where: DocumentTemplateWhereUniqueInput
    create: XOR<DocumentTemplateCreateWithoutDocumentsInput, DocumentTemplateUncheckedCreateWithoutDocumentsInput>
  }

  export type DocumentPersonneCreateWithoutDocumentInput = {
    fonction: string
    personne: PersonneCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentPersonneUncheckedCreateWithoutDocumentInput = {
    id?: number
    fonction: string
    personneId: number
  }

  export type DocumentPersonneCreateOrConnectWithoutDocumentInput = {
    where: DocumentPersonneWhereUniqueInput
    create: XOR<DocumentPersonneCreateWithoutDocumentInput, DocumentPersonneUncheckedCreateWithoutDocumentInput>
  }

  export type DocumentPersonneCreateManyDocumentInputEnvelope = {
    data: DocumentPersonneCreateManyDocumentInput | DocumentPersonneCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutDocumentsInput = {
    email: string
    password: string
    personne?: PersonneCreateNestedOneWithoutUserInput
    mairie?: MairieCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutDocumentsInput = {
    id?: number
    email: string
    password: string
    mairieId?: number | null
  }

  export type UserCreateOrConnectWithoutDocumentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
  }

  export type DocumentTemplateUpsertWithoutDocumentsInput = {
    update: XOR<DocumentTemplateUpdateWithoutDocumentsInput, DocumentTemplateUncheckedUpdateWithoutDocumentsInput>
    create: XOR<DocumentTemplateCreateWithoutDocumentsInput, DocumentTemplateUncheckedCreateWithoutDocumentsInput>
    where?: DocumentTemplateWhereInput
  }

  export type DocumentTemplateUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: DocumentTemplateWhereInput
    data: XOR<DocumentTemplateUpdateWithoutDocumentsInput, DocumentTemplateUncheckedUpdateWithoutDocumentsInput>
  }

  export type DocumentTemplateUpdateWithoutDocumentsInput = {
    content?: StringFieldUpdateOperationsInput | string
    typeDocument?: StringFieldUpdateOperationsInput | string
    documentTemplateVariables?: DocumentTemplateVariableUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentTemplateUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    typeDocument?: StringFieldUpdateOperationsInput | string
    documentTemplateVariables?: DocumentTemplateVariableUncheckedUpdateManyWithoutDocumentTemplateNestedInput
  }

  export type DocumentPersonneUpsertWithWhereUniqueWithoutDocumentInput = {
    where: DocumentPersonneWhereUniqueInput
    update: XOR<DocumentPersonneUpdateWithoutDocumentInput, DocumentPersonneUncheckedUpdateWithoutDocumentInput>
    create: XOR<DocumentPersonneCreateWithoutDocumentInput, DocumentPersonneUncheckedCreateWithoutDocumentInput>
  }

  export type DocumentPersonneUpdateWithWhereUniqueWithoutDocumentInput = {
    where: DocumentPersonneWhereUniqueInput
    data: XOR<DocumentPersonneUpdateWithoutDocumentInput, DocumentPersonneUncheckedUpdateWithoutDocumentInput>
  }

  export type DocumentPersonneUpdateManyWithWhereWithoutDocumentInput = {
    where: DocumentPersonneScalarWhereInput
    data: XOR<DocumentPersonneUpdateManyMutationInput, DocumentPersonneUncheckedUpdateManyWithoutDocumentInput>
  }

  export type UserUpsertWithoutDocumentsInput = {
    update: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserUpdateWithoutDocumentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    personne?: PersonneUpdateOneRequiredWithoutUserNestedInput
    mairie?: MairieUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    mairieId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DocumentCreateWithoutPersonnesInput = {
    date: Date | string
    identiteDuMaire: string
    template?: DocumentTemplateCreateNestedOneWithoutDocumentsInput
    user: UserCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutPersonnesInput = {
    id?: number
    date: Date | string
    identiteDuMaire: string
    templateId?: number | null
    userId: number
  }

  export type DocumentCreateOrConnectWithoutPersonnesInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutPersonnesInput, DocumentUncheckedCreateWithoutPersonnesInput>
  }

  export type PersonneCreateWithoutDocumentsInput = {
    nom: string
    prenom: string
    profession?: string | null
    adresse?: string | null
    telephone?: string | null
    dateNaissance?: string | null
    nationalite?: string | null
    numeroCni?: string | null
    sexe?: string | null
    lieuNaissance?: string | null
    user?: UserCreateNestedOneWithoutPersonneInput
  }

  export type PersonneUncheckedCreateWithoutDocumentsInput = {
    id?: number
    nom: string
    prenom: string
    profession?: string | null
    adresse?: string | null
    telephone?: string | null
    dateNaissance?: string | null
    nationalite?: string | null
    numeroCni?: string | null
    sexe?: string | null
    lieuNaissance?: string | null
    user?: UserUncheckedCreateNestedOneWithoutPersonneInput
  }

  export type PersonneCreateOrConnectWithoutDocumentsInput = {
    where: PersonneWhereUniqueInput
    create: XOR<PersonneCreateWithoutDocumentsInput, PersonneUncheckedCreateWithoutDocumentsInput>
  }

  export type DocumentUpsertWithoutPersonnesInput = {
    update: XOR<DocumentUpdateWithoutPersonnesInput, DocumentUncheckedUpdateWithoutPersonnesInput>
    create: XOR<DocumentCreateWithoutPersonnesInput, DocumentUncheckedCreateWithoutPersonnesInput>
    where?: DocumentWhereInput
  }

  export type DocumentUpdateToOneWithWhereWithoutPersonnesInput = {
    where?: DocumentWhereInput
    data: XOR<DocumentUpdateWithoutPersonnesInput, DocumentUncheckedUpdateWithoutPersonnesInput>
  }

  export type DocumentUpdateWithoutPersonnesInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    identiteDuMaire?: StringFieldUpdateOperationsInput | string
    template?: DocumentTemplateUpdateOneWithoutDocumentsNestedInput
    user?: UserUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutPersonnesInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    identiteDuMaire?: StringFieldUpdateOperationsInput | string
    templateId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type PersonneUpsertWithoutDocumentsInput = {
    update: XOR<PersonneUpdateWithoutDocumentsInput, PersonneUncheckedUpdateWithoutDocumentsInput>
    create: XOR<PersonneCreateWithoutDocumentsInput, PersonneUncheckedCreateWithoutDocumentsInput>
    where?: PersonneWhereInput
  }

  export type PersonneUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: PersonneWhereInput
    data: XOR<PersonneUpdateWithoutDocumentsInput, PersonneUncheckedUpdateWithoutDocumentsInput>
  }

  export type PersonneUpdateWithoutDocumentsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    dateNaissance?: NullableStringFieldUpdateOperationsInput | string | null
    nationalite?: NullableStringFieldUpdateOperationsInput | string | null
    numeroCni?: NullableStringFieldUpdateOperationsInput | string | null
    sexe?: NullableStringFieldUpdateOperationsInput | string | null
    lieuNaissance?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutPersonneNestedInput
  }

  export type PersonneUncheckedUpdateWithoutDocumentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    profession?: NullableStringFieldUpdateOperationsInput | string | null
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    dateNaissance?: NullableStringFieldUpdateOperationsInput | string | null
    nationalite?: NullableStringFieldUpdateOperationsInput | string | null
    numeroCni?: NullableStringFieldUpdateOperationsInput | string | null
    sexe?: NullableStringFieldUpdateOperationsInput | string | null
    lieuNaissance?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUncheckedUpdateOneWithoutPersonneNestedInput
  }

  export type UserCreateWithoutMairieInput = {
    email: string
    password: string
    personne?: PersonneCreateNestedOneWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMairieInput = {
    id?: number
    email: string
    password: string
    documents?: DocumentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMairieInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMairieInput, UserUncheckedCreateWithoutMairieInput>
  }

  export type UserCreateManyMairieInputEnvelope = {
    data: UserCreateManyMairieInput | UserCreateManyMairieInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutMairieInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutMairieInput, UserUncheckedUpdateWithoutMairieInput>
    create: XOR<UserCreateWithoutMairieInput, UserUncheckedCreateWithoutMairieInput>
  }

  export type UserUpdateWithWhereUniqueWithoutMairieInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutMairieInput, UserUncheckedUpdateWithoutMairieInput>
  }

  export type UserUpdateManyWithWhereWithoutMairieInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutMairieInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    mairieId?: IntNullableFilter<"User"> | number | null
  }

  export type DocumentCreateManyUserInput = {
    id?: number
    date: Date | string
    identiteDuMaire: string
    templateId?: number | null
  }

  export type DocumentUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    identiteDuMaire?: StringFieldUpdateOperationsInput | string
    template?: DocumentTemplateUpdateOneWithoutDocumentsNestedInput
    personnes?: DocumentPersonneUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    identiteDuMaire?: StringFieldUpdateOperationsInput | string
    templateId?: NullableIntFieldUpdateOperationsInput | number | null
    personnes?: DocumentPersonneUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    identiteDuMaire?: StringFieldUpdateOperationsInput | string
    templateId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DocumentPersonneCreateManyPersonneInput = {
    id?: number
    fonction: string
    documentId: number
  }

  export type DocumentPersonneUpdateWithoutPersonneInput = {
    fonction?: StringFieldUpdateOperationsInput | string
    document?: DocumentUpdateOneRequiredWithoutPersonnesNestedInput
  }

  export type DocumentPersonneUncheckedUpdateWithoutPersonneInput = {
    id?: IntFieldUpdateOperationsInput | number
    fonction?: StringFieldUpdateOperationsInput | string
    documentId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentPersonneUncheckedUpdateManyWithoutPersonneInput = {
    id?: IntFieldUpdateOperationsInput | number
    fonction?: StringFieldUpdateOperationsInput | string
    documentId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentCreateManyTemplateInput = {
    id?: number
    date: Date | string
    identiteDuMaire: string
    userId: number
  }

  export type DocumentTemplateVariableCreateManyDocumentTemplateInput = {
    id?: number
    variableId: number
  }

  export type DocumentUpdateWithoutTemplateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    identiteDuMaire?: StringFieldUpdateOperationsInput | string
    personnes?: DocumentPersonneUpdateManyWithoutDocumentNestedInput
    user?: UserUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    identiteDuMaire?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    personnes?: DocumentPersonneUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    identiteDuMaire?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentTemplateVariableUpdateWithoutDocumentTemplateInput = {
    variable?: VariableUpdateOneRequiredWithoutDocumentTemplateVariablesNestedInput
  }

  export type DocumentTemplateVariableUncheckedUpdateWithoutDocumentTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    variableId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentTemplateVariableUncheckedUpdateManyWithoutDocumentTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    variableId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentTemplateVariableCreateManyVariableInput = {
    id?: number
    documentTemplateId: number
  }

  export type DocumentTemplateVariableUpdateWithoutVariableInput = {
    documentTemplate?: DocumentTemplateUpdateOneRequiredWithoutDocumentTemplateVariablesNestedInput
  }

  export type DocumentTemplateVariableUncheckedUpdateWithoutVariableInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentTemplateId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentTemplateVariableUncheckedUpdateManyWithoutVariableInput = {
    id?: IntFieldUpdateOperationsInput | number
    documentTemplateId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentPersonneCreateManyDocumentInput = {
    id?: number
    fonction: string
    personneId: number
  }

  export type DocumentPersonneUpdateWithoutDocumentInput = {
    fonction?: StringFieldUpdateOperationsInput | string
    personne?: PersonneUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentPersonneUncheckedUpdateWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    fonction?: StringFieldUpdateOperationsInput | string
    personneId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentPersonneUncheckedUpdateManyWithoutDocumentInput = {
    id?: IntFieldUpdateOperationsInput | number
    fonction?: StringFieldUpdateOperationsInput | string
    personneId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateManyMairieInput = {
    id?: number
    email: string
    password: string
  }

  export type UserUpdateWithoutMairieInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    personne?: PersonneUpdateOneRequiredWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMairieInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    documents?: DocumentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutMairieInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}